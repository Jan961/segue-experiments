generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ActivityType {
  Id              Int               @id @default(autoincrement()) @map("ActivityTypeId")
  Name            String            @map("ActivityTypeName") @db.VarChar(30)
  ColourIndex     Int?              @map("ActivityTypeColourIndex") @db.TinyInt
  Code            String            @map("ActivityTypeCode") @db.VarChar(2)
  BookingActivity BookingActivity[]
}

model Booking {
  Id                    Int                   @unique @default(autoincrement()) @map("BookingId")
  DateBlockId           Int                   @map("BookingDateBlockId")
  VenueId               Int                   @map("BookingVenueId")
  FirstDate             DateTime              @map("BookingFirstDate") @db.Date
  StatusCode            String                @default("U") @map("BookingStatusCode") @db.Char(1)
  PencilNum             Int?                  @map("BookingPencilNum")
  LandingPageURL        String?               @map("BookingLandingPageURL") @db.VarChar(255)
  TicketsOnSaleFromDate DateTime?             @map("BookingTicketsOnSaleFromDate") @db.Date
  TicketsOnSale         Boolean?              @map("BookingTicketsOnSale") @db.Bit(1)
  IsOnSale              Boolean               @default(dbgenerated("(b'0')")) @map("BookingIsOnSale") @db.Bit(1)
  OnSaleDate            DateTime?             @map("BookingOnSaleDate") @db.Date
  MarketingPlanReceived Boolean               @default(dbgenerated("(b'0')")) @map("BookingMarketingPlanReceived") @db.Bit(1)
  ContactInfoReceived   Boolean               @default(dbgenerated("(b'0')")) @map("BookingContactInfoReceived") @db.Bit(1)
  PrintReqsReceived     Boolean               @default(dbgenerated("(b'0')")) @map("BookingPrintReqsReceived") @db.Bit(1)
  Notes                 String?               @map("BookingNotes") @db.LongText
  DealNotes             String?               @map("BookingDealNotes") @db.LongText
  TicketPriceNotes      String?               @map("BookingTicketPriceNotes") @db.LongText
  MarketingDealNotes    String?               @map("BookingMarketingDealNotes") @db.LongText
  CrewNotes             String?               @map("BookingCrewNotes") @db.LongText
  SalesNotes            String?               @map("BookingSalesNotes") @db.LongText
  HoldNotes             String?               @map("BookingHoldNotes") @db.LongText
  CompNotes             String?               @map("BookingCompNotes") @db.LongText
  MerchandiseNotes      String?               @map("BookingMerchandiseNotes") @db.LongText
  CastRateTicketNotes   String?               @map("BookingCastRateTicketNotes") @db.LongText
  BookedVenueHistory    BookedVenueHistory[]
  DateBlock             DateBlock             @relation(fields: [DateBlockId], references: [Id], onUpdate: Restrict, map: "DateBlock_Booking")
  Venue                 Venue                 @relation(fields: [VenueId], references: [Id], map: "Venue_Booking")
  BookingActivity       BookingActivity[]
  BookingAttachedFile   BookingAttachedFile[]
  Contract              Contract?
  Performance           Performance[]
  SalesSet              SalesSet[]

  @@id([Id, DateBlockId])
  @@unique([DateBlockId, VenueId, FirstDate, StatusCode], map: "SECONDARY")
  @@index([DateBlockId], map: "DateBlock_Booking_idx")
  @@index([VenueId], map: "Venue_Booking_idx")
}

model BookingActivity {
  Id               Int           @id @default(autoincrement()) @map("ActivityId")
  BookingId        Int           @map("ActivityBookingId")
  Date             DateTime?     @map("ActivityDate") @db.DateTime(0)
  Name             String?       @map("ActivityName") @db.VarChar(30)
  ActivityTypeId   Int?          @map("ActivityActivityTypeId")
  CompanyCost      Decimal?      @map("ActivityCompanyCost") @db.Decimal(8, 2)
  VenueCost        Decimal?      @map("ActivityVenueCost") @db.Decimal(8, 2)
  FollowUpRequired Boolean       @default(dbgenerated("(b'0')")) @map("ActivityFollowUpRequired") @db.Bit(1)
  DueByDate        DateTime?     @map("ActivityDueByDate") @db.Date
  CreatedDT        DateTime?     @map("ActivityCreatedDT") @db.DateTime(0)
  ActivityNotes    String?       @db.LongText
  ActivityType     ActivityType? @relation(fields: [ActivityTypeId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "ActivityType_BookingActivity")
  Booking          Booking       @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Activity")

  @@index([ActivityTypeId], map: "ActivityType_BookingActivity_idx")
  @@index([BookingId], map: "Booking_BookingActivity_idx")
}

model BookingContactNotes {
  Id            Int       @id @default(autoincrement()) @map("BookingContactId")
  BookingId     Int
  CoContactName String?   @db.VarChar(30)
  ContactDate   DateTime? @db.DateTime(0)
  ActionByDate  DateTime? @db.DateTime(0)
  Notes         String?   @db.VarChar(500)
}

model Contract {
  BookingId            Int                    @id @map("ContractBookingId")
  StatusCode           String?                @map("ContactStatusCode") @db.VarChar(4)
  SignedDate           DateTime?              @map("ContractSignedDate") @db.Date
  SignedBy             String?                @map("ContractSignedBy") @db.VarChar(30)
  ReturnDate           DateTime?              @map("ContractReturnDate") @db.Date
  CheckedBy            String?                @map("ContractCheckedBy") @db.VarChar(30)
  RoyalPercentage      Decimal?               @map("RoyaltyPercentage") @db.Decimal(5, 2)
  DealType             String?                @db.VarChar(4)
  ContractNotes        String?                @db.LongText
  Booking              Booking                @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Contract")
  ContractAttachedFile ContractAttachedFile[]
}

model Currency {
  CurrencyCode                                                       String           @id @unique(map: "SECONDARY") @db.VarChar(3)
  CurrencySymbol                                                     String           @db.VarChar(1)
  ConversionRate_ConversionRate_ConversionFromCurrencyCodeToCurrency ConversionRate[] @relation("ConversionRate_ConversionFromCurrencyCodeToCurrency")
  ConversionRate_ConversionRate_ConversionToCurrencyCodeToCurrency   ConversionRate[] @relation("ConversionRate_ConversionToCurrencyCodeToCurrency")
  Venue                                                              Venue[]
}

model DateType {
  Id                          Int         @id @default(autoincrement()) @map("DateTypeId")
  Name                        String      @unique(map: "OtherDayTypeName_UNIQUE") @map("DateTypeName") @db.VarChar(30)
  DateTypeAffectsAvailability Boolean     @default(dbgenerated("(b'0')")) @db.Bit(1)
  DateTypeSeqNo               Int?        @db.UnsignedTinyInt
  Other                       Other[]
  Rehearsal                   Rehearsal[]
}

model Show {
  Id         Int     @id @default(autoincrement()) @map("ShowId")
  AccountId  Int     @map("ShowAccountId")
  Code       String  @map("ShowCode") @db.VarChar(10)
  Name       String  @map("ShowName") @db.VarChar(80)
  Logo       Bytes?  @map("ShowLogo")
  Type       String  @map("ShowType") @db.VarChar(1)
  IsArchived Boolean @default(dbgenerated("(b'0')")) @map("ShowIsArchived") @db.Bit(1)
  IsDeleted  Boolean @default(dbgenerated("(b'0')")) @map("ShowIsDeleted") @db.Bit(1)
  Account    Account @relation(fields: [AccountId], references: [AccountId], onUpdate: Restrict, map: "Account_Show")
  Tour       Tour[]

  @@unique([AccountId, Code], map: "SECONDARY")
  @@index([AccountId], map: "Account_Show_idx")
}

model Tour {
  Id              Int               @id @default(autoincrement()) @map("TourId")
  ShowId          Int               @map("TourShowId")
  Code            String            @map("TourCode") @db.VarChar(10)
  TourSalesEmail  String?           @db.VarChar(80)
  IsArchived      Boolean           @default(dbgenerated("(b'0')")) @map("TourIsArchived") @db.Bit(1)
  IsDeleted       Boolean           @default(dbgenerated("(b'0')")) @map("TourIsDeleted") @db.Bit(1)
  AccountUserTour AccountUserTour[]
  ConversionRate  ConversionRate[]
  DateBlock       DateBlock[]
  Show            Show              @relation(fields: [ShowId], references: [Id], map: "ShowMayHaveTour")
  TourTask        TourTask[]

  @@unique([Code, ShowId], map: "SECONDARY")
  @@index([ShowId], map: "ShowMayHaveTour")
}

model TourTask {
  Id                   Int           @id @default(autoincrement()) @map("TourTaskId")
  TourId               Int
  Code                 Int           @map("TaskCode") @db.SmallInt
  Name                 String        @map("TaskName") @db.VarChar(80)
  Priority             Int           @default(0) @map("TaskPriority") @db.TinyInt
  Notes                String?       @map("TaskNotes") @db.VarChar(500)
  Progress             Int           @default(0) @map("TaskProgress") @db.TinyInt
  AssignedToUserId     Int?          @map("TaskAssignedToUserId")
  CompleteByPostTour   Boolean       @default(dbgenerated("(b'0')")) @map("TaskCompleteByIsPostTour") @db.Bit(1)
  Interval             String?       @default("once") @map("TaskRepeatInterval") @db.VarChar(20)
  RepeatCount          Bytes?        @map("TaskRepeatCount") @db.TinyBlob
  StartByWeekNum       Int?          @map("TaskStartByWeekNum") @db.SmallInt
  StartByPostTour      Boolean       @default(dbgenerated("(b'0')")) @map("TaskStartByIsPostTour") @db.Bit(1)
  CompleteByWeekNum    Int?          @map("TaskCompleteByWeekNum") @db.SmallInt
  TaskWatcher          TaskWatcher[]
  Tour                 Tour          @relation(fields: [TourId], references: [Id], onDelete: Cascade, map: "Tour_TourTask_fk")
  User                 User?         @relation(fields: [AssignedToUserId], references: [Id], onDelete: Cascade, map: "User_TourTask_Assigned")

  @@index([TourId], map: "Tour_TourTask_fk")
  @@index([AssignedToUserId], map: "User_TourTask_Assigned")
}

model Venue {
  Id                                                        Int                  @id @default(autoincrement()) @map("VenueId")
  Code                                                      String               @map("VenueCode") @db.VarChar(6)
  Name                                                      String               @map("VenueName") @db.VarChar(255)
  StatusCode                                                String               @default("O") @map("VenueStatusCode") @db.VarChar(1)
  Website                                                   String?              @map("VenueWebsite") @db.VarChar(255)
  Family                                                    String?              @map("VenueFamily") @db.VarChar(100)
  CurrencyCode                                              String               @map("VenueCurrencyCode") @db.VarChar(3)
  VATIndicator                                              Boolean              @default(dbgenerated("(b'0')")) @map("VenueVATIndicator") @db.Bit(1)
  TechSpecsURL                                              String?              @map("VenueTechSpecsURL") @db.VarChar(255)
  Seats                                                     Float?               @map("VenueSeats")
  BarringClause                                             String?              @map("VenueBarringClause") @db.VarChar(255)
  TownPopulation                                            Float?               @map("VenueTownPopulation")
  LXDesk                                                    String?              @map("VenueLXDesk") @db.VarChar(50)
  LXNotes                                                   String?              @map("VenueLXNotes") @db.VarChar(2000)
  SoundDesk                                                 String?              @map("VenueSoundDesk") @db.VarChar(50)
  SoundNotes                                                String?              @map("VenueSoundNotes") @db.VarChar(2000)
  StageSize                                                 String?              @map("VenueStageSize") @db.VarChar(50)
  GridHeight                                                String?              @map("VenueGridHeight") @db.VarChar(50)
  VenueFlags                                                String?              @map("VenueVenueFlags") @db.VarChar(2000)
  BarringWeeksPre                                           Int?                 @map("VenueBarringWeeksPre") @db.TinyInt
  BarringWeeksPost                                          Int?                 @map("VenueBarringWeeksPost") @db.TinyInt
  BarringMiles                                              Int?                 @map("VenueBarringMiles")
  CulturallyExempt                                          Boolean              @default(dbgenerated("(b'0')")) @map("VenueCulturallyExempt") @db.Bit(1)
  VenueAccountId                                            Int
  IsDeleted                                                 Boolean              @default(dbgenerated("(b'0')")) @map("VenueIsDeleted") @db.Bit(1)
  VenueNotes                                                String?              @db.LongText
  VenueWarningNotes                                         String?              @db.LongText
  BookedVenueHistory                                        BookedVenueHistory[]
  Booking                                                   Booking[]
  GetInFitUp                                                GetInFitUp[]
  Currency                                                  Currency             @relation(fields: [CurrencyCode], references: [CurrencyCode], onUpdate: Restrict, map: "Currency_Venue")
  VenueAddress                                              VenueAddress[]
  VenueBarredVenue_VenueBarredVenue_VBVBarredVenueIdToVenue VenueBarredVenue[]   @relation("VenueBarredVenue_VBVBarredVenueIdToVenue")
  VenueBarredVenue_VenueBarredVenue_VBVVenueIdToVenue       VenueBarredVenue[]   @relation("VenueBarredVenue_VBVVenueIdToVenue")
  VenueContact                                              VenueContact[]
  VenueVenue1                                               VenueVenue[]         @relation("VenueVenue_VVVenue1IdToVenue") @ignore
  VenueVenue2                                               VenueVenue[]         @relation("VenueVenue_VVVenue2IdToVenue") @ignore

  @@index([CurrencyCode], map: "Currency_Venue")
}

model VenueBarredVenue {
  Id                                             Int   @id @default(autoincrement()) @map("VBVId")
  VenueId                                        Int   @map("VBVVenueId")
  BarredVenueId                                  Int   @map("VBVBarredVenueId")
  Venue_VenueBarredVenue_VBVBarredVenueIdToVenue Venue @relation("VenueBarredVenue_VBVBarredVenueIdToVenue", fields: [BarredVenueId], references: [Id], onUpdate: Restrict, map: "Venue_VBV_BV")
  Venue_VenueBarredVenue_VBVVenueIdToVenue       Venue @relation("VenueBarredVenue_VBVVenueIdToVenue", fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VBV_V")

  @@index([VenueId], map: "Venue_VenueBarredVenue_idx")
  @@index([BarredVenueId], map: "Venue_VenueBarredVenue_idx1")
}

model VenueContact {
  Id          Int       @id @default(autoincrement()) @map("ContactId")
  VenueId     Int       @map("ContactVenueId")
  FirstName   String?   @map("ContactFirstName") @db.VarChar(50)
  LastName    String?   @map("ContactLastName") @db.VarChar(50)
  Phone       String?   @map("ContactPhone") @db.VarChar(30)
  Email       String?   @map("ContactEmail") @db.VarChar(80)
  Role        String?   @map("ContactRole") @db.VarChar(30)
  RoleIndex   String    @default("") @map("ContactRoleIndex") @db.VarChar(1)
  VenueRoleId Int       @map("ContactVenueRoleId")
  VenueRole   VenueRole @relation(fields: [VenueRoleId], references: [Id], onUpdate: Restrict, map: "VenueRole_VenueContact")
  Venue       Venue     @relation(fields: [VenueId], references: [Id], onUpdate: Restrict, map: "Venue_VenueContact")

  @@index([VenueRoleId], map: "VenueRole_VenueContact")
  @@index([VenueId], map: "Venue_Contact_idx")
}

model VenueRole {
  Id           Int            @id @default(autoincrement()) @map("VenueRoleId")
  Name         String         @unique(map: "VenueRole_RoleName_uq") @map("VenueRoleName") @db.VarChar(30)
  IsStandard   Boolean        @map("VenueRoleIsStandard") @db.Bit(1)
  VenueContact VenueContact[]
}

model VenueVenue {
  Venue1Id Int   @map("VVVenue1Id")
  Venue2Id Int   @map("VVVenue2Id")
  Mileage  Int?  @map("VVMileage")
  TimeMins Int?  @map("VVTimeMins")
  Venue1   Venue @relation("VenueVenue_VVVenue1IdToVenue", fields: [Venue1Id], references: [Id], onDelete: Cascade, map: "Venue_VenueVenue1")
  Venue2   Venue @relation("VenueVenue_VVVenue2IdToVenue", fields: [Venue2Id], references: [Id], onDelete: Cascade, map: "Venue_VenueVenue2")

  @@id([Venue1Id, Venue2Id])
  @@index([Venue1Id], map: "Venue_VenueVenue1_idx")
  @@index([Venue2Id], map: "Venue_VenueVenue2_idx")
}

model DateBlock {
  Id                 Int          @unique @default(autoincrement()) @map("DateBlockId")
  TourId             Int          @map("DateBlockTourId")
  Name               String       @map("DateBlockName") @db.VarChar(45)
  StartDate          DateTime     @map("DateBlockStartDate") @db.Date
  EndDate            DateTime     @map("DateBlockEndDate") @db.Date
  DateBlockIsPrimary Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  Booking            Booking[]
  Tour               Tour         @relation(fields: [TourId], references: [Id], onDelete: Cascade, map: "Tour_DateBlock")
  GetInFitUp         GetInFitUp[]
  Other              Other[]
  Rehearsal          Rehearsal[]

  @@id([Id, TourId])
  @@unique([TourId, Name], map: "DateBlockName")
  @@unique([TourId, StartDate], map: "SECONDARY")
  @@index([TourId], map: "Tour_DateBlock")
}

model GetInFitUp {
  Id          Int       @unique(map: "GetInFitUpDay_UNIQUE") @default(autoincrement()) @map("GetInFitUpId")
  DateBlockId Int       @map("GetInFitUpDateBlockId")
  VenueId     Int       @map("GetInFitUpVenueId")
  StatusCode  String    @default("U") @map("GetInFitUpStatusCode") @db.Char(1)
  Date        DateTime  @map("GetInFitUpDate") @db.Date
  DateBlock   DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_GetInFitUp")
  Venue       Venue     @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_GetInFitUp")

  @@index([DateBlockId], map: "DateBlock_GetInFitUpDay_idx")
  @@index([VenueId], map: "Venue_GetInFitUpDay_idx")
}

model Other {
  Id          Int       @id @default(autoincrement()) @map("OtherId")
  DateBlockId Int       @map("OtherDateBlockId")
  DateTypeId  Int       @map("OtherDateTypeId")
  StatusCode  String    @map("OtherStatusCode") @db.Char(1)
  Date        DateTime  @map("OtherDate") @db.Date
  DateBlock   DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Other")
  DateType    DateType  @relation(fields: [DateTypeId], references: [Id], onUpdate: Restrict, map: "DateType_Other")

  @@index([DateBlockId], map: "DateBlock_OtherDay_idx")
  @@index([DateTypeId], map: "OtherDayType_idx")
}

model Performance {
  Id            Int             @id @default(autoincrement()) @map("PerformanceId")
  BookingId     Int             @map("PerformanceBookingId")
  Time          DateTime        @map("PerformanceTime") @db.Time(0)
  Date          DateTime        @map("PerformanceDate") @db.Date
  AvailableComp AvailableComp[]
  Booking       Booking         @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Performance")
  SalesSet      SalesSet[]

  @@index([BookingId], map: "Booking_Performance_fk")
  @@index([BookingId, Time, Date], map: "SECONDARY")
}

model Rehearsal {
  Id          Int       @id @default(autoincrement()) @map("RehearsalId")
  DateBlockId Int       @map("RehearsalDateBlockId")
  Town        String?   @map("RehearsalTown") @db.VarChar(50)
  StatusCode  String    @default("U") @map("RehearsalStatusCode") @db.Char(1)
  Date        DateTime  @map("RehearsalDate") @db.Date
  DateTypeId  Int?      @map("RehearsalDateTypeId")
  DateBlock   DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Rehearsal")
  DateType    DateType? @relation(fields: [DateTypeId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "DateType_Rehearsal")

  @@index([DateBlockId], map: "DateBlock_Rehearsal_idx")
  @@index([DateTypeId], map: "DateType_Rehearsal_idx")
}

model Account {
  AccountId              Int           @id @default(autoincrement())
  AccountName            String        @db.VarChar(50)
  AccountAddress1        String?       @db.VarChar(50)
  AccountAddress2        String?       @db.VarChar(50)
  AccountAddress3        String?       @db.VarChar(50)
  AccountAddressTown     String?       @db.VarChar(50)
  AccountAddressCounty   String?       @db.VarChar(50)
  AccountAddressPostcode String?       @db.VarChar(20)
  AccountAddressCountry  String?       @db.VarChar(30)
  AccountVATNumber       String?       @db.VarChar(20)
  AccountCurrencyCode    String        @db.VarChar(3)
  AccountCompanyNumber   String?       @db.VarChar(20)
  AccountUser            AccountUser[]
  Show                   Show[]
}

model AvailableComp {
  Id                 Int              @id @default(autoincrement()) @map("AvailableCompId")
  PerformanceId      Int              @map("AvailableCompPerformanceId")
  Seats              Int              @default(1) @map("AvailableCompSeats") @db.TinyInt
  AvailableCompNotes String?          @db.LongText
  Performance        Performance      @relation(fields: [PerformanceId], references: [Id], onDelete: Cascade, map: "PerformanceMayHaveAvailableComps")
  CompAllocation     CompAllocation[]

  @@index([PerformanceId], map: "fkBooking_BookingPromoterHoldAvailable")
}

model BookedVenueHistory {
  BVHistoryId Int      @id @default(autoincrement())
  BVBookingId Int
  BVVenueId   Int
  BVUpdateDT  DateTime @db.DateTime(0)
  Booking     Booking  @relation(fields: [BVBookingId], references: [Id], onUpdate: Restrict, map: "Booking_History")
  Venue       Venue    @relation(fields: [BVVenueId], references: [Id], onUpdate: Restrict, map: "Venue_History")

  @@index([BVBookingId], map: "Booking_BookingHistory")
  @@index([BVVenueId], map: "Venue_History_idx")
}

model CompAllocation {
  Id                     Int           @id @default(autoincrement()) @map("CompAllocationId")
  AvailableCompId        Int           @map("CompAllocationAvailableCompId")
  TicketHolderName       String        @map("CompAllocationTicketHolderName") @db.VarChar(50)
  Seats                  Int           @default(1) @map("CompAllocationSeats") @db.TinyInt
  Comments               String?       @map("CompAllocationComments") @db.VarChar(100)
  RequestedBy            String?       @map("CompAllocationRequestedBy") @db.VarChar(50)
  ArrangedBy             String?       @map("CompAllocationArrangedBy") @db.VarChar(50)
  VenueConfirmationNotes String?       @map("CompAllocationVenueConfirmationNotes") @db.VarChar(100)
  TicketHolderEmail      String?       @map("CompAllocationTicketHolderEmail") @db.VarChar(80)
  SeatsAllocated         String?       @map("CompAllocationSeatsAllocated") @db.VarChar(50)
  AvailableComp          AvailableComp @relation(fields: [AvailableCompId], references: [Id], onDelete: Cascade, map: "AvailableCompsMayBeAllocated")

  @@index([AvailableCompId], map: "AvailableCompsMayBeAllocated")
}

model CompType {
  CompTypeId    Int       @id @default(autoincrement())
  CompTypeName  String    @unique(map: "CompName") @db.VarChar(30)
  CompTypeCode  String    @db.VarChar(5)
  CompTypeSeqNo Int
  SetComp       SetComp[]
}

model ConversionRate {
  ConversionId                                                 Int      @id @default(autoincrement())
  ConversionFromCurrencyCode                                   String   @db.VarChar(3)
  ConversionToCurrencyCode                                     String   @db.VarChar(3)
  ConversionTourId                                             Int
  ConversionRate                                               Decimal  @db.Decimal(8, 4)
  Currency_ConversionRate_ConversionFromCurrencyCodeToCurrency Currency @relation("ConversionRate_ConversionFromCurrencyCodeToCurrency", fields: [ConversionFromCurrencyCode], references: [CurrencyCode], onUpdate: Restrict, map: "Currency_ConversionDate_From")
  Currency_ConversionRate_ConversionToCurrencyCodeToCurrency   Currency @relation("ConversionRate_ConversionToCurrencyCodeToCurrency", fields: [ConversionToCurrencyCode], references: [CurrencyCode], onUpdate: Restrict, map: "Currency_ConversionDate_To")
  Tour                                                         Tour     @relation(fields: [ConversionTourId], references: [Id], onUpdate: Restrict, map: "Tour_ConversionRate")

  @@index([ConversionFromCurrencyCode], map: "Currency_ConversionDate_From_idx")
  @@index([ConversionToCurrencyCode], map: "Currency_ConversionDate_To_idx")
  @@index([ConversionTourId], map: "Tour_ConversionDate_idx")
}

model HoldType {
  HoldTypeId    Int       @id @default(autoincrement())
  HoldTypeName  String    @unique(map: "HoldName") @db.VarChar(30)
  HoldTypeCode  String    @db.VarChar(5)
  HoldTypeSeqNo Int
  SetHold       SetHold[]
}

model ParsedEmail {
  ParsedEmailId         Int      @id @default(autoincrement())
  ParsedEmailTo         String   @db.VarChar(150)
  ParsedEmailFrom       String   @db.VarChar(150)
  ParsedEmailSubject    String   @db.VarChar(10)
  ParsedEmailDate       DateTime @db.Date
  ParsedEmailContent    String   @db.LongText
  ParsedEmailsCreatedAt DateTime @db.DateTime(0)
  ParsedEmailsUpdatedAt DateTime @db.DateTime(0)
}

model Sale {
  SaleId         Int       @id @default(autoincrement())
  SaleSaleTypeId Int?
  SaleSetId      Int?
  SaleSeats      Int?      @db.SmallInt
  SaleValue      Decimal?  @db.Decimal(8, 2)
  SaleType       SaleType? @relation(fields: [SaleSaleTypeId], references: [SaleTypeId], onDelete: Restrict, onUpdate: Restrict, map: "SaleType_Sale")
  SalesSet       SalesSet? @relation(fields: [SaleSetId], references: [SetId], onDelete: Restrict, onUpdate: Restrict, map: "SaleSet_Sale")

  @@index([SaleSaleTypeId], map: "BookingSale_Sale_idx")
  @@index([SaleSetId], map: "SaleType_Sale_idx")
}

model SaleType {
  SaleTypeId   Int    @id @default(autoincrement())
  SaleTypeName String @db.VarChar(45)
  Sale         Sale[]
}

model SalesSet {
  SetId               Int          @id @default(autoincrement())
  SetBookingId        Int
  SetPerformanceId    Int?
  SetSalesFiguresDate DateTime     @db.Date
  SetBrochureReleased Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetSingleSeats      Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetNotOnSale        Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsFinalFigures   Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsCopy           Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  Sale                Sale[]
  Booking             Booking      @relation(fields: [SetBookingId], references: [Id], onUpdate: Restrict, map: "Booking_BookingSale")
  Performance         Performance? @relation(fields: [SetPerformanceId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "Performance_SalesSet")
  SetComp             SetComp[]
  SetHold             SetHold[]

  @@index([SetBookingId, SetSalesFiguresDate], map: "BookingSale_Booking_SalesFigures")
  @@index([SetBookingId], map: "Booking_BookingSale_fk")
  @@index([SetPerformanceId], map: "Performance_SalesSet_idx")
}

model SetComp {
  SetCompId         Int      @id @default(autoincrement())
  SetCompSetId      Int
  SetCompCompTypeId Int
  SetCompSeats      Int      @default(0)
  CompType          CompType @relation(fields: [SetCompCompTypeId], references: [CompTypeId], map: "CompType_SetComp")
  SalesSet          SalesSet @relation(fields: [SetCompSetId], references: [SetId], onDelete: Cascade, map: "SalesSet_SetComp")

  @@index([SetCompCompTypeId], map: "CompType_SetComp")
  @@index([SetCompSetId], map: "SalesSet_SetComp_idx")
}

model SetHold {
  SetHoldId         Int      @id @default(autoincrement())
  SetHoldSetId      Int
  SetHoldHoldTypeId Int
  SetHoldSeats      Int      @default(0)
  SetHoldValue      Decimal? @db.Decimal(8, 2)
  HoldType          HoldType @relation(fields: [SetHoldHoldTypeId], references: [HoldTypeId], map: "HoldType_SetHold")
  SalesSet          SalesSet @relation(fields: [SetHoldSetId], references: [SetId], onDelete: Cascade, map: "SalesSet_SetHold")

  @@index([SetHoldHoldTypeId], map: "HoldType_SetHold")
  @@index([SetHoldSetId], map: "SalesSet_SetHold_idx")
}

model BookingAttachedFile {
  FileId               Int      @id @default(autoincrement())
  FileBookingBookingId Int
  FileDescription      String   @db.VarChar(100)
  FileOriginalFilename String   @db.VarChar(100)
  FileDateTime         DateTime @db.DateTime(0)
  FileUploadedDateTime DateTime @db.DateTime(0)
  FileContent          Bytes
  Booking              Booking  @relation(fields: [FileBookingBookingId], references: [Id], onDelete: Cascade, map: "Booking_BookingAttachedFile")

  @@index([FileBookingBookingId], map: "Booking_BookingAttachedFile")
}

model ContractAttachedFile {
  FileId                Int      @id @default(autoincrement())
  FileContractBookingId Int
  FileDescription       String   @db.VarChar(100)
  FileOriginalFilename  String   @db.VarChar(100)
  FileDateTime          DateTime @db.DateTime(0)
  FileUploadedDateTime  DateTime @db.DateTime(0)
  FileContent           Bytes
  Contract              Contract @relation(fields: [FileContractBookingId], references: [BookingId], onDelete: Cascade, map: "Contract_ContractAttachedFile")

  @@index([FileContractBookingId], map: "Contract_ContractAttachedFile")
}

model VenueAddress {
  Id       Int     @id @default(autoincrement()) @map("VenueAddressId")
  VenueId  Int     @map("VenueAddressVenueId")
  TypeName String  @map("VenueAddressTypeName") @db.VarChar(15)
  Line1    String? @map("VenueAddress1") @db.VarChar(50)
  Line2    String? @map("VenueAddress2") @db.VarChar(50)
  Line3    String? @map("VenueAddress3") @db.VarChar(50)
  Town     String? @map("VenueAddressTown") @db.VarChar(50)
  County   String? @map("VenueAddressCounty") @db.VarChar(50)
  Postcode String? @map("VenueAddressPostcode") @db.VarChar(12)
  Country  String? @map("VenueAddressCountry") @db.VarChar(30)
  Venue    Venue   @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VenueAddress")

  @@index([VenueId], map: "Venue_VenueAddress")
}

model User {
  Id          Int           @id @default(autoincrement()) @map("UserId")
  Email       String        @unique(map: "UserEmail_uk") @map("UserEmail") @db.VarChar(120)
  FirstName   String        @map("UserFirstName") @db.VarChar(50)
  LastName    String?       @map("UserLastName") @db.VarChar(50)
  AccountId   Int?          @map("UserAccountId")
  AccountUser AccountUser[]
  TaskWatcher TaskWatcher[]
  TourTask    TourTask[]
}

model AccountUser {
  Id                    Int                     @id @default(autoincrement()) @map("AccUserId")
  UserId                Int                     @map("AccUserUserId")
  AccountId             Int                     @map("AccUserAccountId")
  Account               Account                 @relation(fields: [AccountId], references: [AccountId], onDelete: Cascade, map: "Account_AccountUser")
  User                  User                    @relation(fields: [UserId], references: [Id], onDelete: Cascade, map: "User_AccountUser")
  AccountUserPermission AccountUserPermission[]
  AccountUserTour       AccountUserTour[]

  @@index([AccountId], map: "Account_AccountUser")
  @@index([UserId], map: "User_AccountUser")
}

model AccountUserPermission {
  Id           Int         @id @default(autoincrement()) @map("UserAuthId")
  AccUserId    Int         @map("UserAuthAccUserId")
  PermissionId Int         @map("UserAuthPermissionId")
  AccountUser  AccountUser @relation(fields: [AccUserId], references: [Id], onDelete: Cascade, map: "AccountUser_AccountUserPermission")
  Permission   Permission  @relation(fields: [PermissionId], references: [Id], onDelete: Cascade, map: "PermissionAccountUserPermission")

  @@index([AccUserId], map: "AccountUser_AccountUserPermission")
  @@index([PermissionId], map: "PermissionAccountUserPermission")
}

model AccountUserTour {
  Id          Int         @id @default(autoincrement()) @map("AUTId")
  UserId      Int         @map("AUTAccUserId")
  TourId      Int         @map("AUTTourId")
  AccountUser AccountUser @relation(fields: [UserId], references: [Id], onDelete: Cascade, map: "AccountUser_AccountUserTour")
  Tour        Tour        @relation(fields: [TourId], references: [Id], onDelete: Cascade, map: "Tour_AccountUserTour")

  @@index([UserId], map: "AccountUser_AccountUserTour")
  @@index([TourId], map: "Tour_AccountUserTour")
}

model Permission {
  Id                    Int                     @id @default(autoincrement()) @map("PermissionId")
  Name                  String                  @map("PermissionName") @db.VarChar(50)
  Description           String                  @map("PermissionDescription") @db.LongText
  PermissionGroupId     Int                     @map("PermissionPermissionGroupId")
  SeqNo                 Int?                    @map("PermissionSeqNo") @db.TinyInt
  AccountUserPermission AccountUserPermission[]
  PermissionGroup       PermissionGroup         @relation(fields: [PermissionGroupId], references: [Id], onUpdate: Restrict, map: "PermissionGroup_Permission")

  @@index([PermissionGroupId], map: "PermissionGroup_Permission")
}

model PermissionGroup {
  Id         Int          @id @default(autoincrement()) @map("PermissionGroupId")
  Name       String       @map("PermissionGroupName") @db.VarChar(50)
  SeqNo      Int          @map("PermissionGroupSeqNo") @db.TinyInt
  Permission Permission[]
}

model TaskWatcher {
  WatcherId         Int      @id @default(autoincrement())
  WatcherTourTaskId Int
  WatcherUserId     Int
  TourTask          TourTask @relation(fields: [WatcherTourTaskId], references: [Id], onDelete: Cascade, map: "TourTask_TaskWatcher")
  User              User     @relation(fields: [WatcherUserId], references: [Id], onDelete: Cascade, map: "User_TaskWatcher")

  @@index([WatcherTourTaskId], map: "TourTask_TaskWatcher")
  @@index([WatcherUserId], map: "User_TaskWatcher")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view SalesFiguresView {
  SetId               Int      @default(0)
  BookingId           Int
  PerformanceId       Int?
  SetSalesFiguresDate DateTime @db.Date
  SaleTypeId          Int      @default(0)
  SaleTypeName        String   @db.VarChar(45)
  SaleId              Int?     @default(0)
  SaleSeats           Int?     @db.SmallInt
  SaleValue           Decimal? @db.Decimal(8, 2)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingTravelView {
  BookingDateBlockId Int
  FromBookingId      Int  @default(0)
  Mileage            Int?
  TimeMins           Int?

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingHoldCompUnionView {
  SetBookingId        Int      @default(0)
  SetSalesFiguresDate DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  HoldOrComp          String   @default("") @db.VarChar(4)
  Code                String   @default("") @db.VarChar(5)
  Name                String   @default("") @db.VarChar(30)
  Seats               Int?
  Value               Decimal? @db.Decimal(8, 2)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ScheduleView {
  TourId              Int       @default(0)
  FullTourCode        String?   @db.VarChar(20)
  ShowName            String    @db.VarChar(80)
  RehearsalStartDate  DateTime? @db.Date
  TourStartDate       DateTime? @db.Date
  TourEndDate         DateTime? @db.Date
  EntryDate           DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  TourWeekNum         Int?      @db.SmallInt
  EntryType           String?   @db.VarChar(30)
  EntryId             Int       @default(0)
  EntryName           String?   @db.VarChar(255)
  EntryStatusCode     String    @default("") @db.Char(1)
  Location            String?   @db.VarChar(50)
  PencilNum           Int?
  VenueId             Int?
  VenueSeats          Float?
  Mileage             Int?
  TimeMins            Int?
  DateTypeId          Int?
  DateTypeName        String?   @db.VarChar(30)
  AffectsAvailability Bytes?    @db.VarBinary(1)
  SeqNo               Decimal?  @db.Decimal(4, 0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view VenueView {
  VenueId                      Int     @default(0)
  VenueCode                    String  @db.VarChar(6)
  VenueName                    String  @db.VarChar(255)
  VenueStatusCode              String  @default("O") @db.VarChar(1)
  VenueWebsite                 String? @db.VarChar(255)
  VenueFamily                  String? @db.VarChar(100)
  VenueCurrencyCode            String  @db.VarChar(3)
  VenueVATIndicator            Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueTechSpecsURL            String? @db.VarChar(255)
  VenueSeats                   Float?
  VenueBarringClause           String? @db.VarChar(255)
  VenueTownPopulation          Float?
  VenueLXDesk                  String? @db.VarChar(50)
  VenueLXNotes                 String? @db.VarChar(2000)
  VenueSoundDesk               String? @db.VarChar(50)
  VenueSoundNotes              String? @db.VarChar(2000)
  VenueStageSize               String? @db.VarChar(50)
  VenueGridHeight              String? @db.VarChar(50)
  VenueVenueFlags              String? @db.VarChar(2000)
  VenueBarringWeeksPre         Int?    @db.TinyInt
  VenueBarringWeeksPost        Int?    @db.TinyInt
  VenueBarringMiles            Int?
  VenueCulturallyExempt        Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueAccountId               Int
  VenueIsDeleted               Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueMainAddress1            String? @db.VarChar(50)
  VenueMainAddress2            String? @db.VarChar(50)
  VenueMainAddress3            String? @db.VarChar(50)
  VenueMainAddressTown         String? @db.VarChar(50)
  VenueMainAddressCounty       String? @db.VarChar(50)
  VenueMainAddressPostcode     String? @db.VarChar(12)
  VenueMainAddressCountry      String? @db.VarChar(30)
  VenueDeliveryAddress1        String? @db.VarChar(50)
  VenueDeliveryAddress2        String? @db.VarChar(50)
  VenueDeliveryAddress3        String? @db.VarChar(50)
  VenueDeliveryAddressTown     String? @db.VarChar(50)
  VenueDeliveryAddressCounty   String? @db.VarChar(50)
  VenueDeliveryAddressPostcode String? @db.VarChar(12)
  VenueDeliveryAddressCountry  String? @db.VarChar(30)
  VenueMainNoteText            String? @db.LongText
  VenueWarningNoteText         String? @db.LongText

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view TourPerformanceSummaryView {
  TourId     Int
  StatusCode String @default("U") @db.Char(1)
  Count      BigInt @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view DateBlockDatesView {
  DateBlockId         Int      @default(0)
  EntryType           String?  @db.VarChar(30)
  EntryId             Int      @default(0)
  EntryDate           DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  EntryName           String?  @db.VarChar(255)
  TownName            String?  @db.VarChar(50)
  StatusCode          String   @default("") @db.Char(1)
  PencilNum           Int?
  VenueId             Int?
  VenueSeats          Float?
  Mileage             Int?
  TimeMins            Int?
  DateTypeId          Int?
  DateTypeName        String?  @db.VarChar(30)
  AffectsAvailability Bytes?   @db.VarBinary(1)
  SeqNo               Decimal? @db.Decimal(4, 0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BarringView {
  VenueId       Int    @default(0)
  BarredVenueId Int    @default(0)
  BarType       String @default("") @db.VarChar(7)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view TourView {
  TourId             Int       @default(0)
  TourCode           String    @db.VarChar(10)
  FullTourCode       String?   @db.VarChar(20)
  TourSalesEmail     String?   @db.VarChar(80)
  TourIsArchived     Boolean   @default(dbgenerated("(b'0')")) @db.Bit(1)
  TourIsDeleted      Boolean   @default(dbgenerated("(b'0')")) @db.Bit(1)
  ShowId             Int       @default(0)
  ShowCode           String    @db.VarChar(10)
  ShowName           String    @db.VarChar(80)
  ShowType           String    @db.VarChar(1)
  ShowLogo           Bytes?
  RehearsalStartDate DateTime? @db.Date
  RehearsalEndDate   DateTime? @db.Date
  TourStartDate      DateTime? @db.Date
  TourEndDate        DateTime? @db.Date

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingDateDiffView {
  BookingDateBlockId Int
  FromBookingId      Int  @default(0)
  ToBookingId        Int  @default(0)
  DaysDifference     Int?
  FromVenueId        Int
  ToVenueId          Int

  @@ignore
}

/// The underlying view does not contain salesSetTotalsViewa valid unique identifier and can therefore currently not be handled by Prisma Client.
view VenueVenueView {
  FromVenueId Int  @default(0)
  ToVenueId   Int  @default(0)
  Mileage     Int?
  TimeMins    Int?

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ShowView {
  ShowId         Int     @default(0)
  ShowCode       String  @db.VarChar(10)
  ShowName       String  @db.VarChar(80)
  ShowLogo       Bytes?
  ShowType       String  @db.VarChar(1)
  ShowIsArchived Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  ShowIsDeleted  Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  ShowAccountId  Int

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view SalesView {
  ShowName                 String    @db.VarChar(80)
  TourId                   Int       @default(0)
  FullTourCode             String?   @db.VarChar(20)
  TourStartDate            DateTime? @db.Date
  TourEndDate              DateTime? @db.Date
  BookingId                Int       @default(0)
  BookingFirstDate         DateTime  @db.Date
  BookingStatusCode        String    @default("U") @db.Char(1)
  BookingTourWeekNum       Int?      @db.SmallInt
  VenueTown                String?   @db.VarChar(50)
  VenueCode                String    @db.VarChar(6)
  VenueName                String    @db.VarChar(255)
  VenueCurrencyCode        String    @db.VarChar(3)
  VenueCurrencySymbol      String    @db.VarChar(1)
  ConversionToCurrencyCode String?   @db.VarChar(3)
  ConversionRate           Decimal?  @db.Decimal(8, 4)
  SetSalesFiguresDate      DateTime? @db.Date
  SetBookingWeekNum        Int?      @db.SmallInt
  SetTourWeekDate          DateTime? @db.Date
  SetNotOnSale             Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsFinalFigures        Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetSingleSeats           Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetBrochureReleased      Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsCopy                Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SaleTypeName             String?   @db.VarChar(45)
  Seats                    Decimal?  @db.Decimal(27, 0)
  Value                    Decimal?  @db.Decimal(30, 2)
  TotalCapacity            Float?
  FinalFiguresDate         DateTime? @db.Date
  FinalFiguresSeats        Decimal?  @db.Decimal(27, 0)
  FinalFiguresValue        Decimal?  @db.Decimal(30, 2)
  NotOnSaleDate            DateTime? @db.Date
  TotalHoldSeats           Decimal?  @db.Decimal(32, 0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingSelectionView {
  BookingId            Int      @default(0)
  BookingStatusCode    String   @default("U") @db.Char(1)
  BookingFirstDate     DateTime @db.Date
  VenueId              Int      @default(0)
  VenueCode            String   @db.VarChar(6)
  VenueMainAddressTown String?  @db.VarChar(50)
  TourId               Int      @default(0)
  FullTourCode         String?  @db.VarChar(20)
  TourLengthWeeks      Int?     @db.SmallInt

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingHoldCompsView {
  FullTourCode      String?  @db.VarChar(20)
  VenueCode         String   @db.VarChar(6)
  VenueName         String   @db.VarChar(255)
  VenueSeats        Float?
  BookingFirstDate  DateTime @db.Date
  BookingStatusCode String   @default("U") @db.Char(1)
  HoldOrComp        String   @default("") @db.VarChar(4)
  Code              String   @default("") @db.VarChar(5)
  Name              String   @default("") @db.VarChar(30)
  Seats             Decimal? @db.Decimal(32, 0)
  SoldSeats         Decimal? @db.Decimal(27, 0)
  ReservedSeats     Decimal? @db.Decimal(27, 0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view TourSummaryView {
  TourId                      Int      @default(0)
  DateTypeAffectsAvailability Decimal? @db.Decimal(1, 0)
  DateTypeId                  Int?
  DateTypeSeqNo               Decimal? @db.Decimal(3, 0)
  Item                        String   @default("") @db.VarChar(30)
  StatusCode                  String   @default("") @db.Char(1)
  Count                       BigInt   @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view PromoterHoldsView {
  TourId                               Int       @default(0)
  FullTourCode                         String?   @db.VarChar(20)
  VenueCode                            String    @db.VarChar(6)
  VenueName                            String    @db.VarChar(255)
  BookingId                            Int       @default(0)
  PerformanceDate                      DateTime? @db.Date
  PerformanceTime                      DateTime? @db.Time(0)
  AvailableCompSeats                   Int?      @default(1) @db.TinyInt
  AvailableCompNotes                   String?   @db.LongText
  CompAllocationSeats                  Int?      @default(1) @db.TinyInt
  CompAllocationTicketHolderName       String?   @db.VarChar(50)
  CompAllocationSeatsAllocated         String?   @db.VarChar(50)
  CompAllocationTicketHolderEmail      String?   @db.VarChar(80)
  CompAllocationComments               String?   @db.VarChar(100)
  CompAllocationRequestedBy            String?   @db.VarChar(50)
  CompAllocationArrangedBy             String?   @db.VarChar(50)
  CompAllocationVenueConfirmationNotes String?   @db.VarChar(100)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ScheduledDatesView {
  DateBlockId Int      @default(0)
  EntryId     Int      @default(0)
  EntryDate   DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  EntrySource String   @default("") @db.VarChar(13)
  EntryName   String?  @db.VarChar(255)
  TownName    String?  @db.VarChar(50)
  StatusCode  String   @default("") @db.Char(1)
  PencilNum   Int?
  VenueSeats  Float?
  Mileage     Int?
  TimeMins    Int?

  @@ignore
}

view SalesSetTotalsView {
  SetBookingId        Int
  SetSalesFiguresDate DateTime @db.Date
  SetIsFinalFigures   Boolean  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SaleTypeName        String   @db.VarChar(45)
  Seats               Decimal? @db.Decimal(27, 0)
  Value               Decimal? @db.Decimal(30, 2)

  @@unique([SetBookingId, SetSalesFiguresDate])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view SalesSummaryView {
  TourId                   Int       @default(0)
  FullTourCode             String?   @db.VarChar(20)
  ShowName                 String    @db.VarChar(80)
  TourStartDate            DateTime? @db.Date
  TourEndDate              DateTime? @db.Date
  TourWeekNum              Int?      @db.SmallInt
  EntryDate                DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  Location                 String?   @db.VarChar(50)
  EntryId                  Int       @default(0)
  EntryName                String?   @db.VarChar(255)
  EntryType                String?   @db.VarChar(30)
  EntryStatusCode          String    @default("") @db.Char(1)
  Value                    Decimal?  @db.Decimal(30, 2)
  VenueCurrencyCode        String?   @db.VarChar(3)
  VenueCurrencySymbol      String?   @db.VarChar(1)
  ConversionRate           Decimal?  @db.Decimal(8, 4)
  ConversionToCurrencyCode String?   @db.VarChar(3)
  SaleTypeName             String?   @db.VarChar(45)
  SetSalesFiguresDate      DateTime? @db.Date
  FinalSetSalesFiguresDate DateTime? @db.Date

  @@ignore
}
