generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ActivityType {
  Id          Int               @id @default(autoincrement()) @map("ActivityTypeId")
  Name        String            @db.VarChar(30) @map("ActivityTypeName")
  ColourIndex Int?              @db.TinyInt @map("ActivityTypeColourIndex")
  Code        String            @db.VarChar(2) @map("ActivityTypeCode")
  BookingActivity         BookingActivity[]
}

model AttachedFile {
  Id               Int      @id @map("FileId")
  OwnerType        String?  @db.VarChar(30) @map("FileOwnerType")
  OwnerId          Int @map("FileOwnerId")
  Description      String   @db.VarChar(100) @map("FileDescription")
  OriginalFilename String   @db.VarChar(100) @map("FileOriginalFilename")
  DT               DateTime @db.DateTime(0) @map("FileDT")
  UploadedDT       DateTime @db.DateTime(0) @map("FileUploadedDT")
  Content          Bytes @map("FileContent")
}

model Booking {
  Id                    Int               @unique @default(autoincrement()) @map("BookingId")
  DateBlockId           Int @map("BookingDateBlockId")
  VenueId               Int @map("BookingVenueId")
  FirstDate             DateTime          @db.Date @map("BookingFirstDate")
  StatusCode            String            @default("U") @db.Char(1) @map("BookingStatusCode")
  PencilNum             Int? @map("BookingPencilNum")
  LandingPageURL        String?           @db.VarChar(255) @map("BookingLandingPageURL")
  TicketsOnSaleFromDate DateTime?         @db.Date @map("BookingTicketsOnSaleFromDate")
  TicketsOnSale         Boolean?          @db.Bit(1) @map("BookingTicketsOnSale")
  DateBlock                    DateBlock         @relation(fields: [DateBlockId], references: [Id], onUpdate: Restrict, map: "DateBlock_Booking")
  Venue                        Venue?             @relation(fields: [VenueId], references: [Id], map: "Venue_Booking")
  BookingActivity              BookingActivity[]
  Contract                     Contract?
  Performance                  Performance[]

  @@id([Id, DateBlockId])
  @@unique([DateBlockId, VenueId, FirstDate, StatusCode], map: "SECONDARY")
  @@index([DateBlockId], map: "DateBlock_Booking_idx")
  @@index([VenueId], map: "Venue_Booking_idx")
}

model BookingActivity {
  Id               Int           @id @default(autoincrement()) @map("ActivityId")
  BookingId        Int @map("ActivityBookingId")
  Date             DateTime?     @db.DateTime(0) @map("ActivityDate")
  Name             String?       @db.VarChar(30) @map("ActivityName")
  ActivityTypeId   Int? @map("ActivityActivityTypeId")
  CompanyCost      Decimal?      @db.Decimal(8, 2) @map("ActivityCompanyCost")
  VenueCost        Decimal?      @db.Decimal(8, 2) @map("ActivityVenueCost")
  FollowUpRequired Boolean       @default(dbgenerated("(b'0')")) @db.Bit(1) @map("ActivityFollowUpRequired")
  DueByDate        DateTime?     @db.Date @map("ActivityDueByDate")
  CreatedDT        DateTime?     @db.DateTime(0) @map("ActivityCreatedDT")
  ActivityType             ActivityType? @relation(fields: [ActivityTypeId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "ActivityType_BookingActivity")
  Booking                  Booking       @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Activity")

  @@index([ActivityTypeId], map: "ActivityType_BookingActivity_idx")
  @@index([BookingId], map: "Booking_BookingActivity_idx")
}

model BookingContactNotes {
  Id Int       @id @default(autoincrement()) @map("BookingContactId")
  BookingId        Int
  CoContactName    String?   @db.VarChar(30)
  ContactDate      DateTime? @db.DateTime(0)
  ActionByDate     DateTime? @db.DateTime(0)
  Notes            String?   @db.VarChar(500)
}

model BookingHistory {
  Id Int      @id @default(autoincrement()) @map("BookingHistoryId")
  BookingId        Int
  VenueId          Int?
  UpdateDT         DateTime @db.DateTime(0)

  @@index([BookingId], map: "Booking_BookingHistory")
}

model BookingSale {
  Id            Int               @id @default(autoincrement()) @map("BookingSaleId")
  BookingId                Int
  SalesFiguresDate         DateTime?         @db.DateTime(0)
  NumSeatsSold             Int?
  NumSeatsReserved         Int?
  SoldSeatsValue           Decimal?          @db.Decimal(8, 2)
  ReservedSeatsValue       Decimal?          @db.Decimal(8, 2)
  NumSchoolSeatsSold       Int?
  NumSchoolSeatsReserved   Int?
  SoldSchoolSeatsValue     Decimal?          @db.Decimal(8, 2)
  ReservedSchoolSeatsValue Decimal?          @db.Decimal(8, 2)
  BrochureReleased         Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  SingleSeats              Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  NotOnSale                Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  FinalFigures             Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  IsCopy                   Boolean           @default(false)
  BookingSaleComp          BookingSaleComp[]
  BookingSaleHold          BookingSaleHold[]

  @@index([BookingId, SalesFiguresDate], map: "BookingSale_Booking_SalesFigures")
  @@index([BookingId], map: "Booking_BookingSale_fk")
}

model BookingSaleComp {
  Id Int         @id @default(autoincrement()) @map("BookingSaleCompId")
  BookingSaleId     Int
  CompId            Int
  Seats             Int         @default(0)
  BookingSale       BookingSale @relation(fields: [BookingSaleId], references: [Id], onDelete: Cascade, map: "BookingSale_BookingSaleComp")
  Comp              Comp        @relation(fields: [CompId], references: [Id], map: "Comp_BookingSaleComp")

  @@index([BookingSaleId], map: "BookingSale_BookingSaleComp")
  @@index([CompId], map: "Comp_BookingSaleComp")
}

model BookingSaleHold {
  Id Int         @id @default(autoincrement()) @map("BookingSaleHoldId")
  BookingSaleId     Int
  HoldId            Int
  Seats             Int         @default(0)
  Value             Decimal?    @db.Decimal(8, 2)
  BookingSale       BookingSale @relation(fields: [BookingSaleId], references: [Id], onDelete: Cascade, map: "BookingSale_BookingSaleHold")
  Hold              Hold        @relation(fields: [HoldId], references: [Id], map: "Hold_BookingSaleHold")

  @@index([BookingSaleId], map: "BookingSale_BookingSaleHold")
  @@index([HoldId], map: "Hold_BookingSaleHold")
}

model Comp {
  Id          Int               @id @default(autoincrement()) @map("CompId")
  Name        String            @unique(map: "CompName") @db.VarChar(30) @map("CompName")
  Code        String            @db.VarChar(5) @map("CompCode")
  SeqNo           Int
  BookingSaleComp BookingSaleComp[]
}

model Contract {
  BookingId  Int       @id @map("ContractBookingId")
  StatusCode  String?   @db.VarChar(4) @map("ContactStatusCode")
  SignedDate DateTime? @db.Date @map("ContractSignedDate")
  SignedBy   String?   @db.VarChar(30) @map("ContractSignedBy")
  ReturnDate DateTime? @db.DateTime(0) @map("ContractReturnDate")
  CheckedBy  String?   @db.VarChar(30) @map("ContractCheckedBy")
  RoyalPercentage  Decimal?  @db.Decimal(5, 2) @map("RoyaltyPercentage")
  DealType           String?   @db.VarChar(4)
  Booking            Booking   @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Contract")
}

model Currency {
  Currency       String   @id @db.VarChar(3)
  Symbol         String?  @db.VarChar(1)
  ConversionRate Decimal? @db.Decimal(5, 4)
}

model DateType {
  Id   Int         @unique(map: "OtherDayTypeId_UNIQUE") @default(autoincrement()) @map("DateTypeId")
  Name String      @unique(map: "OtherDayTypeName_UNIQUE") @db.VarChar(30) @map("DateTypeName")
  Other        Other[]
  Rehearsal    Rehearsal[]
}

model Hold {
  Id          Int               @id @default(autoincrement()) @map("HoldId")
  Name        String            @unique(map: "HoldName") @db.VarChar(30) @map("HoldName")
  Code        String            @db.VarChar(5) @map("HoldCode")
  SeqNo           Int
  BookingSaleHold BookingSaleHold[]
}

model Note {
  Id        Int    @id @default(autoincrement()) @map("NoteId")
  OwnerType String @db.VarChar(30) @map("NoteOwnerType")
  OwnerId   Int @map("NoteOwnerId")
  TypeName  String @db.VarChar(15) @map("NoteTypeName")
  Text      String @db.LongText @map("NoteText")
}

model Show {
  Id         Int     @id @default(autoincrement()) @map("ShowId")
  Code       String  @unique(map: "SECONDARY") @db.VarChar(10) @map("ShowCode")
  Name       String  @db.VarChar(80) @map("ShowName")
  Logo       Bytes? @map("ShowLogo")
  Type       String  @db.VarChar(1) @map("ShowType")
  IsArchived Boolean @default(dbgenerated("(b'0')")) @db.Bit(1) @map("ShowIsArchived")
  AccountId  Int? @map("ShowAccountId")
  IsDeleted  Boolean @default(dbgenerated("(b'0')")) @db.Bit(1) @map("ShowIsDeleted")
  Tour           Tour[]
}

model Tour {
  Id         Int         @id @default(autoincrement()) @map("TourId")
  ShowId     Int @map("TourShowId")
  Code       String      @db.VarChar(10) @map("TourCode")
  IsArchived Boolean     @default(dbgenerated("(b'0')")) @db.Bit(1) @map("TourIsArchived")
  IsDeleted  Boolean     @default(dbgenerated("(b'0')")) @db.Bit(1) @map("TourIsDeleted")
  DateBlock      DateBlock[]
  Show           Show        @relation(fields: [ShowId], references: [Id], map: "ShowMayHaveTour")
  TourTask       TourTask[]

  @@unique([Code, ShowId], map: "SECONDARY")
  @@index([ShowId], map: "ShowMayHaveTour")
}

model TourTask {
  Id         Int     @id @default(autoincrement()) @map("TourTaskId")
  TourId             Int
  TaskCode           Int     @db.SmallInt
  TaskName           String  @db.VarChar(80)
  StartByWeekCode    String  @db.VarChar(6)
  CompleteByWeekCode String  @db.VarChar(6)
  Priority           Int     @default(0) @db.TinyInt
  Notes              String? @db.VarChar(500)
  DeptRCK            Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  DeptMarketing      Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  DeptProduction     Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  DeptAccounts       Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  Progress           Int     @default(0) @db.TinyInt
  Tour               Tour    @relation(fields: [TourId], references: [Id], onDelete: Cascade, map: "Tour_TourTask_fk")

  @@index([TourId], map: "Tour_TourTask_fk")
}

model Venue {
  Id                                                   Int                @id @default(autoincrement()) @map("VenueId")
  Code                                                 String             @db.VarChar(6) @map("VenueCode")
  Name                                                 String             @db.VarChar(255) @map("VenueName")
  StatusCode                                           String             @default("O") @db.VarChar(1) @map("VenueStatusCode")
  Website                                              String?            @db.VarChar(255) @map("VenueWebsite")
  Family                                               String?            @db.VarChar(100) @map("VenueFamily")
  CurrencyCode                                         String             @default("GBP") @db.VarChar(3) @map("VenueCurrencyCode")
  VATIndicator                                         Boolean            @default(dbgenerated("(b'0')")) @db.Bit(1) @map("VenueVATIndicator")
  TechSpecsURL                                         String?            @db.VarChar(255) @map("VenueTechSpecsURL")
  Seats                                                Float? @map("VenueSeats")
  BarringClause                                        String?            @db.VarChar(255) @map("VenueBarringClause")
  TownPopulation                                       Float? @map("VenueTownPopulation")
  LXDesk                                               String?            @db.VarChar(50) @map("VenueLXDesk")
  LXNotes                                              String?            @db.VarChar(2000) @map("VenueLXNotes")
  SoundDesk                                            String?            @db.VarChar(50) @map("VenueSoundDesk")
  SoundNotes                                           String?            @db.VarChar(2000) @map("VenueSoundNotes")
  StageSize                                            String?            @db.VarChar(50) @map("VenueStageSize")
  GridHeight                                           String?            @db.VarChar(50) @map("VenueGridHeight")
  VenueFlags                                           String?            @db.VarChar(2000) @map("VenueVenueFlags")
  BarringWeeksPre                                      Int?               @db.TinyInt @map("VenueBarringWeeksPre")
  BarringWeeksPost                                     Int?               @db.TinyInt @map("VenueBarringWeeksPost")
  BarringMiles                                         Int? @map("VenueBarringMiles")
  CulturallyExempt                                     Boolean            @default(dbgenerated("(b'0')")) @db.Bit(1) @map("VenueCulturallyExempt")
  IsDeleted                                                 Boolean            @map("VenueIsDeleted") @default(dbgenerated("(b'0')")) @db.Bit(1)
  Booking                                                   Booking[]
  GetInFitUp                                                GetInFitUp[]
  VenueBarredVenue_VenueBarredVenue_VBVBarredVenueIdToVenue VenueBarredVenue[] @relation("VenueBarredVenue_VBVBarredVenueIdToVenue")
  VenueBarredVenue_VenueBarredVenue_VBVVenueIdToVenue       VenueBarredVenue[] @relation("VenueBarredVenue_VBVVenueIdToVenue")
  VenueContact                                              VenueContact[]
  VenueVenue_VenueVenue_VVVenue1IdToVenue                   VenueVenue[]       @relation("VenueVenue_VVVenue1IdToVenue")
  VenueVenue_VenueVenue_VVVenue2IdToVenue                   VenueVenue[]       @relation("VenueVenue_VVVenue2IdToVenue")
}

model VenueBarredVenue {
  Id                                          Int   @id @default(autoincrement()) @map("VBVId")
  VenueId                                     Int @map("VBVVenueId")
  BarredVenueId                               Int @map("VBVBarredVenueId")
  Venue_VenueBarredVenue_VBVBarredVenueIdToVenue Venue @relation("VenueBarredVenue_VBVBarredVenueIdToVenue", fields: [BarredVenueId], references: [Id], onUpdate: Restrict, map: "Venue_VBV_BV")
  Venue_VenueBarredVenue_VBVVenueIdToVenue       Venue @relation("VenueBarredVenue_VBVVenueIdToVenue", fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VBV_V")

  @@index([VenueId], map: "Venue_VenueBarredVenue_idx")
  @@index([BarredVenueId], map: "Venue_VenueBarredVenue_idx1")
}

model VenueContact {
  Id          Int       @id @default(autoincrement()) @map("ContactId")
  VenueId     Int @map("ContactVenueId")
  FirstName   String?   @db.VarChar(50) @map("ContactFirstName")
  LastName    String?   @db.VarChar(50) @map("ContactLastName")
  Phone       String?   @db.VarChar(30) @map("ContactPhone")
  Email       String?   @db.VarChar(80) @map("ContactEmail")
  Role        String?   @db.VarChar(30) @map("ContactRole")
  RoleIndex   String    @default("") @db.VarChar(1) @map("ContactRoleIndex")
  VenueRoleId Int @map("ContactVenueRoleId")
  VenueRole          VenueRole @relation(fields: [VenueRoleId], references: [Id], onUpdate: Restrict, map: "VenueRole_VenueContact")
  Venue              Venue     @relation(fields: [VenueId], references: [Id], onUpdate: Restrict, map: "Venue_VenueContact")

  @@index([VenueRoleId], map: "VenueRole_VenueContact")
  @@index([VenueId], map: "Venue_Contact_idx")
}

model VenueRole {
  Id         Int            @id @default(autoincrement()) @map("VenueRoleId")
  Name       String         @unique(map: "VenueRole_RoleName_uq") @db.VarChar(30) @map("VenueRoleName")
  IsStandard Boolean        @db.Bit(1) @map("VenueRoleIsStandard")
  VenueContact        VenueContact[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model VenueVenue {
  Venue1Id                         Int  @map("VVVenue1Id")
  Venue2Id                         Int  @map("VVVenue2Id")
  Mileage                          Int? @map("VVMileage")
  TimeMins                         Int? @map("VVTimeMins")
  Venue_VenueVenue_VVVenue1IdToVenue Venue @relation("VenueVenue_VVVenue1IdToVenue", fields: [Venue1Id], references: [Id], onDelete: Cascade, map: "Venue_VenueVenue1")
  Venue_VenueVenue_VVVenue2IdToVenue Venue @relation("VenueVenue_VVVenue2IdToVenue", fields: [Venue2Id], references: [Id], onDelete: Cascade, map: "Venue_VenueVenue2")

  @@index([Venue1Id], map: "Venue_VenueVenue1_idx")
  @@index([Venue2Id], map: "Venue_VenueVenue2_idx")
  @@id([Venue1Id, Venue2Id])
}

model DBSetting {
  Id  Int    @id @default(autoincrement()) @map("DBSettingId")
  Name  String @unique(map: "SettingName") @db.VarChar(50) @map("SettingName")
  Value String @db.VarChar(255) @map("SettingValue")

  @@map("_DBSetting")
}

model Address {
  Id        Int     @id @default(autoincrement()) @map("AddressId")
  OwnerType String  @db.VarChar(30) @map("AddressOwnerType")
  OwnerId   Int @map("AddressOwnerId")
  TypeName  String  @db.VarChar(15) @map("AddressTypeName")
  Line1         String? @db.VarChar(50) @map("Address1")
  Line2         String? @db.VarChar(50) @map("Address2")
  Line3         String? @db.VarChar(50) @map("Address3")
  Town      String? @db.VarChar(50) @map("AddressTown")
  County    String? @db.VarChar(50) @map("AddressCounty")
  Postcode  String? @db.VarChar(12) @map("AddressPostcode")
  Country   String? @db.VarChar(30) @map("AddressCountry")

  @@unique([OwnerType, OwnerId, TypeName], map: "SECONDARY")
}

model AvailableComps {
  Id Int               @id @default(autoincrement()) @map("AvailableCompsId")
  PerformanceId    Int
  Seats            Int               @default(1) @db.TinyInt
  Notes            String?           @db.VarChar(500)
  Performance      Performance       @relation(fields: [PerformanceId], references: [Id], onDelete: Cascade, map: "PerformanceMayHaveAvailableComps")
  CompsAllocation  CompsAllocation[]

  @@index([PerformanceId], map: "fkBooking_BookingPromoterHoldAvailable")
}

model CompsAllocation {
  Id      Int            @id @default(autoincrement()) @map("CompsAllocationId")
  AvailableCompsId       Int
  TicketHolderName       String         @db.VarChar(50)
  Seats                  Int            @default(1) @db.TinyInt
  Comments               String?        @db.VarChar(100)
  RequestedBy            String?        @db.VarChar(50)
  ArrangedBy             String?        @db.VarChar(50)
  VenueConfirmationNotes String?        @db.VarChar(100)
  TicketHolderEmail      String?        @db.VarChar(80)
  SeatsAllocated         String?        @db.VarChar(50)
  AvailableComps         AvailableComps @relation(fields: [AvailableCompsId], references: [Id], onDelete: Cascade, map: "AvailableCompsMayBeAllocated")

  @@index([AvailableCompsId], map: "AvailableCompsMayBeAllocated")
}

model DateBlock {
  Id        Int          @unique @default(autoincrement()) @map("DateBlockId")
  TourId    Int @map("DateBlockTourId")
  Name      String       @db.VarChar(45) @map("DateBlockName")
  StartDate DateTime     @db.DateTime(0) @map("DateBlockStartDate")
  EndDate   DateTime     @db.DateTime(0) @map("DateBlockEndDate")
  Booking            Booking[]
  Tour               Tour         @relation(fields: [TourId], references: [Id], onDelete: Cascade, map: "Tour_DateBlock")
  GetInFitUp         GetInFitUp[]
  Other              Other[]
  Rehearsal          Rehearsal[]

  @@id([Id, TourId])
  @@unique([TourId, Name], map: "DateBlockName")
  @@unique([TourId, StartDate], map: "SECONDARY")
  @@index([TourId], map: "Tour_DateBlock")
}

model GetInFitUp {
  Id          Int       @unique(map: "GetInFitUpDay_UNIQUE") @default(autoincrement()) @map("GetInFitUpId")
  DateBlockId Int @map("GetInFitUpDateBlockId")
  VenueId     Int @map("GetInFitUpVenueId")
  StatusCode  String    @default("U") @db.Char(1) @map("GetInFitUpStatusCode")
  Date        DateTime  @db.Date @map("GetInFitUpDate")
  DateBlock             DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_GetInFitUp")
  Venue                 Venue     @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_GetInFitUp")

  @@index([DateBlockId], map: "DateBlock_GetInFitUpDay_idx")
  @@index([VenueId], map: "Venue_GetInFitUpDay_idx")
}

model Other {
  Id          Int       @id @default(autoincrement()) @map("OtherId")
  DateBlockId Int @map("OtherDateBlockId")
  DateTypeId  Int @map("OtherDateTypeId")
  StatusCode  String    @db.Char(1) @map("OtherStatusCode")
  Date        DateTime  @db.Date @map("OtherDate")
  DateBlock        DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Other")
  DateType         DateType  @relation(fields: [DateTypeId], references: [Id], onUpdate: Restrict, map: "DateType_Other")

  @@index([DateBlockId], map: "DateBlock_OtherDay_idx")
  @@index([DateTypeId], map: "OtherDayType_idx")
}

model Performance {
  Id        Int              @id @default(autoincrement()) @map("PerformanceId")
  BookingId Int @map("PerformanceBookingId")
  Time      DateTime         @db.Time(0) @map("PerformanceTime")
  Date      DateTime         @db.Date @map("PerformanceDate")
  AvailableComps       AvailableComps[]
  Booking              Booking          @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Performance")

  @@index([BookingId], map: "Booking_Performance_fk")
  @@index([BookingId, Time, Date], map: "SECONDARY")
}

model Rehearsal {
  Id          Int       @id @default(autoincrement()) @map("RehearsalId")
  DateBlockId Int @map("RehearsalDateBlockId")
  Town        String?   @db.VarChar(50) @map("RehearsalTown")
  StatusCode  String    @default("U") @db.Char(1) @map("RehearsalStatusCode")
  Date        DateTime  @db.Date @map("RehearsalDate")
  DateTypeId  Int? @map("RehearsalDateTypeId")
  DateBlock            DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Rehearsal")
  DateType             DateType? @relation(fields: [DateTypeId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "DateType_Rehearsal")

  @@index([DateBlockId], map: "DateBlock_Rehearsal_idx")
  @@index([DateTypeId], map: "DateType_Rehearsal_idx")
}
