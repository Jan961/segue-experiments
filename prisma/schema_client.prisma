generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma-client"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider  = "mysql"
  url       = env("DIRECT_DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model ActivityType {
  Id                    Int                     @id @default(autoincrement()) @map("ActivityTypeId")
  Name                  String                  @unique(map: "ActivityType_Name_Unique") @map("ActivityTypeName") @db.VarChar(30)
  ColourIndex           Int?                    @map("ActivityTypeColourIndex") @db.TinyInt
  Code                  String                  @unique(map: "ActivityType_Code_Unique") @map("ActivityTypeCode") @db.VarChar(2)
  BookingActivity       BookingActivity[]
  GlobalBookingActivity GlobalBookingActivity[]
}

model Booking {
  Id                         Int                   @id @default(autoincrement()) @map("BookingId")
  DateBlockId                Int                   @map("BookingDateBlockId")
  VenueId                    Int                   @map("BookingVenueId")
  FirstDate                  DateTime              @map("BookingFirstDate") @db.Date
  StatusCode                 String                @default("U") @map("BookingStatusCode") @db.Char(1)
  PencilNum                  Int?                  @map("BookingPencilNum")
  LandingPageURL             String?               @map("BookingLandingPageURL") @db.VarChar(255)
  TicketsOnSaleFromDate      DateTime?             @map("BookingTicketsOnSaleFromDate") @db.Date
  TicketsOnSale              Boolean?              @map("BookingTicketsOnSale") @db.Bit(1)
  HasSchoolsSales            Boolean               @default(dbgenerated("(b'0')")) @map("BookingHasSchoolsSales") @db.Bit(1)
  MarketingPlanReceived      Boolean               @default(dbgenerated("(b'0')")) @map("BookingMarketingPlanReceived") @db.Bit(1)
  ContactInfoReceived        Boolean               @default(dbgenerated("(b'0')")) @map("BookingContactInfoReceived") @db.Bit(1)
  PrintReqsReceived          Boolean               @default(dbgenerated("(b'0')")) @map("BookingPrintReqsReceived") @db.Bit(1)
  Notes                      String?               @map("BookingNotes") @db.LongText
  DealNotes                  String?               @map("BookingDealNotes") @db.LongText
  TicketPriceNotes           String?               @map("BookingTicketPriceNotes") @db.LongText
  MarketingDealNotes         String?               @map("BookingMarketingDealNotes") @db.LongText
  CrewNotes                  String?               @map("BookingCrewNotes") @db.LongText
  SalesNotes                 String?               @map("BookingSalesNotes") @db.LongText
  FinalSalesDiscrepancyNotes String?               @map("BookingFinalSalesDiscrepancyNotes") @db.LongText
  HoldNotes                  String?               @map("BookingHoldNotes") @db.LongText
  CompNotes                  String?               @map("BookingCompNotes") @db.LongText
  MerchandiseNotes           String?               @map("BookingMerchandiseNotes") @db.LongText
  CastRateTicketsArranged    Boolean               @default(dbgenerated("(b'0')")) @map("BookingCastRateTicketsArranged") @db.Bit(1)
  CastRateTicketsNotes       String?               @map("BookingCastRateTicketsNotes") @db.LongText
  RunTag                     String                @map("BookingRunTag") @db.Char(8)
  MarketingCostsStatus       String?               @map("BookingMarketingCostsStatus") @db.Char(1)
  MarketingCostsApprovalDate DateTime?             @map("BookingMarketingCostsApprovalDate") @db.Date
  MarketingCostsNotes        String?               @map("BookingMarketingCostsNotes") @db.LongText
  BookedVenueHistory         BookedVenueHistory[]
  DateBlock                  DateBlock             @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Booking")
  Venue                      Venue                 @relation(fields: [VenueId], references: [Id], map: "Venue_Booking")
  BookingActivity            BookingActivity[]
  BookingContactNotes        BookingContactNotes[]
  BookingFile                BookingFile[]
  Contract                   Contract?
  DealMemo                   DealMemo?
  Performance                Performance[]
  SalesSet                   SalesSet[]

  @@unique([DateBlockId, VenueId, FirstDate, StatusCode], map: "SECONDARY")
  @@index([DateBlockId], map: "DateBlock_Booking_idx")
  @@index([VenueId], map: "Venue_Booking_idx")
}

model BookingActivity {
  Id               Int           @id @default(autoincrement()) @map("ActivityId")
  BookingId        Int           @map("ActivityBookingId")
  Date             DateTime?     @map("ActivityDate") @db.DateTime(0)
  Name             String?       @map("ActivityName") @db.VarChar(50)
  ActivityTypeId   Int?          @map("ActivityActivityTypeId")
  CompanyCost      Decimal?      @map("ActivityCompanyCost") @db.Decimal(8, 2)
  VenueCost        Decimal?      @map("ActivityVenueCost") @db.Decimal(8, 2)
  FollowUpRequired Boolean       @default(dbgenerated("(b'0')")) @map("ActivityFollowUpRequired") @db.Bit(1)
  DueByDate        DateTime?     @map("ActivityDueByDate") @db.Date
  CreatedDT        DateTime?     @map("ActivityCreatedDT") @db.DateTime(0)
  Notes            String?       @map("ActivityNotes") @db.LongText
  ActivityType     ActivityType? @relation(fields: [ActivityTypeId], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "ActivityType_BookingActivity")
  Booking          Booking       @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Activity")

  @@index([ActivityTypeId], map: "ActivityType_BookingActivity_idx")
  @@index([BookingId], map: "Booking_BookingActivity_idx")
}

model BookingContactNotes {
  Id              Int       @id @default(autoincrement()) @map("ContactNoteId")
  BookingId       Int       @map("ContactNoteBookingId")
  CoContactName   String?   @map("ContactNoteContactName") @db.VarChar(50)
  ContactDate     DateTime? @map("ContactNoteDateTime") @db.DateTime(0)
  ActionAccUserId Int?      @map("ContactNoteActionAccUserId")
  Notes           String?   @map("ContactNoteNotes") @db.LongText
  Booking         Booking   @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "BookingBookingContactNotes")

  @@index([BookingId], map: "BookingBookingContactNotes")
  @@index([ActionAccUserId], map: "Master_AccountUser_BookingContactNotes")
}

model Contract {
  BookingId         Int            @id @map("ContractBookingId")
  StatusCode        String?        @map("ContractStatusCode") @db.VarChar(4)
  SignedDate        DateTime?      @map("ContractSignedDate") @db.Date
  SignedBy          String?        @map("ContractSignedBy") @db.VarChar(100)
  ReturnDate        DateTime?      @map("ContractReturnDate") @db.Date
  CheckedBy         String?        @map("ContractCheckedBy") @db.VarChar(100)
  RoyaltyPercentage Decimal?       @map("ContractRoyaltyPercentage") @db.Decimal(5, 2)
  DealType          String?        @map("ContractDealType") @db.VarChar(4)
  Notes             String?        @map("ContractNotes") @db.LongText
  ReceivedBackDate  DateTime?      @map("ContractReceivedBackDate") @db.Date
  Exceptions        String?        @map("ContractExceptions") @db.LongText
  BankDetailsSent   Boolean        @default(dbgenerated("(b'0')")) @map("ContractBankDetailsSent") @db.Bit(1)
  TechSpecSent      Boolean        @default(dbgenerated("(b'0')")) @map("ContractTechSpecSent") @db.Bit(1)
  PRSCertSent       Boolean        @default(dbgenerated("(b'0')")) @map("ContractPRSCertSent") @db.Bit(1)
  GP                Decimal?       @map("ContractGP") @db.Decimal(10, 2)
  PromoterPercent   Decimal?       @map("ContractPromoterPercent") @db.Decimal(6, 3)
  Booking           Booking        @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Contract")
  ContractFile      ContractFile[]
}

model DateType {
  Id                          Int     @id @default(autoincrement()) @map("DateTypeId")
  Name                        String  @unique(map: "OtherDayTypeName_UNIQUE") @map("DateTypeName") @db.VarChar(30)
  DateTypeAffectsAvailability Boolean @default(dbgenerated("(b'0')")) @db.Bit(1)
  SeqNo                       Int?    @map("DateTypeSeqNo") @db.UnsignedTinyInt
  Other                       Other[]
}

model Show {
  Id         Int          @id @default(autoincrement()) @map("ShowId")
  Code       String       @unique(map: "SECONDARY") @map("ShowCode") @db.VarChar(10)
  Name       String       @map("ShowName") @db.VarChar(80)
  Type       String?      @map("ShowType") @db.VarChar(1)
  IsArchived Boolean      @default(dbgenerated("(b'0')")) @map("ShowIsArchived") @db.Bit(1)
  Production Production[]
}

model Venue {
  Id                                                        Int                          @id @default(autoincrement()) @map("VenueId")
  Code                                                      String                       @unique(map: "VenueVenueCodeUnique") @map("VenueCode") @db.VarChar(6)
  Name                                                      String                       @map("VenueName") @db.VarChar(255)
  StatusCode                                                String                       @default("O") @map("VenueStatusCode") @db.VarChar(1)
  Website                                                   String?                      @map("VenueWebsite") @db.VarChar(255)
  VATIndicator                                              Boolean                      @default(dbgenerated("(b'0')")) @map("VenueVATIndicator") @db.Bit(1)
  TechSpecsURL                                              String?                      @map("VenueTechSpecsURL") @db.VarChar(255)
  Seats                                                     Float?                       @map("VenueSeats")
  BarringClause                                             String?                      @map("VenueBarringClause") @db.VarChar(255)
  TownPopulation                                            Float?                       @map("VenueTownPopulation")
  LXDesk                                                    String?                      @map("VenueLXDesk") @db.VarChar(50)
  LXNotes                                                   String?                      @map("VenueLXNotes") @db.VarChar(2000)
  SoundDesk                                                 String?                      @map("VenueSoundDesk") @db.VarChar(50)
  SoundNotes                                                String?                      @map("VenueSoundNotes") @db.VarChar(2000)
  StageSize                                                 String?                      @map("VenueStageSize") @db.VarChar(50)
  GridHeight                                                String?                      @map("VenueGridHeight") @db.VarChar(50)
  VenueFlags                                                String?                      @map("VenueVenueFlags") @db.VarChar(2000)
  BarringWeeksPre                                           Int?                         @map("VenueBarringWeeksPre") @db.TinyInt
  BarringWeeksPost                                          Int?                         @map("VenueBarringWeeksPost") @db.TinyInt
  BarringMiles                                              Int?                         @map("VenueBarringMiles")
  CulturallyExempt                                          Boolean                      @default(dbgenerated("(b'0')")) @map("VenueCulturallyExempt") @db.Bit(1)
  VenueAccountId                                            Int
  IsDeleted                                                 Boolean                      @default(dbgenerated("(b'0')")) @map("VenueIsDeleted") @db.Bit(1)
  VenueNotes                                                String?                      @db.LongText
  VenueWarningNotes                                         String?                      @db.LongText
  ExcludeFromChecks                                         Boolean                      @default(dbgenerated("(b'0')")) @map("VenueExcludeFromChecks") @db.Bit(1)
  FamilyId                                                  Int?                         @map("VenueVenueFamilyId")
  AddressStageDoorW3W                                       String?                      @map("VenueAddressStageDoorW3W") @db.VarChar(70)
  AddressLoadingW3W                                         String?                      @map("VenueAddressLoadingW3W") @db.VarChar(70)
  AddressEntranceW3W                                        String?                      @map("VenueAddressEntranceW3W") @db.VarChar(70)
  ACCContract                                               ACCContract[]
  BookedVenueHistory                                        BookedVenueHistory[]
  Booking                                                   Booking[]
  GetInFitUp                                                GetInFitUp[]
  GlobalBookingActivityVenue                                GlobalBookingActivityVenue[]
  Rehearsal                                                 Rehearsal[]
  VenueFamily                                               VenueFamily?                 @relation(fields: [FamilyId], references: [Id], onDelete: Restrict, map: "Venue_VenueFamily")
  VenueAddress                                              VenueAddress[]
  VenueBarredVenue_VenueBarredVenue_VBVBarredVenueIdToVenue VenueBarredVenue[]           @relation("VenueBarredVenue_VBVBarredVenueIdToVenue")
  VenueBarredVenue_VenueBarredVenue_VBVVenueIdToVenue       VenueBarredVenue[]           @relation("VenueBarredVenue_VBVVenueIdToVenue")
  VenueContact                                              VenueContact[]
  VenueFile                                                 VenueFile[]

  @@index([FamilyId], map: "Venue_VenueFamily")
}

model VenueBarredVenue {
  Id                                             Int   @id @default(autoincrement()) @map("VBVId")
  VenueId                                        Int   @map("VBVVenueId")
  BarredVenueId                                  Int   @map("VBVBarredVenueId")
  Venue_VenueBarredVenue_VBVBarredVenueIdToVenue Venue @relation("VenueBarredVenue_VBVBarredVenueIdToVenue", fields: [BarredVenueId], references: [Id], onUpdate: Restrict, map: "Venue_VBV_BV")
  Venue_VenueBarredVenue_VBVVenueIdToVenue       Venue @relation("VenueBarredVenue_VBVVenueIdToVenue", fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VBV_V")

  @@unique([VenueId, BarredVenueId], map: "VenueId_VenueBarredVenueId_idx")
  @@index([VenueId], map: "Venue_VenueBarredVenue_idx")
  @@index([BarredVenueId], map: "Venue_VenueBarredVenue_idx1")
}

model VenueContact {
  Id                                                     Int        @id @default(autoincrement()) @map("ContactId")
  VenueId                                                Int        @map("ContactVenueId")
  FirstName                                              String?    @map("ContactFirstName") @db.VarChar(50)
  LastName                                               String?    @map("ContactLastName") @db.VarChar(50)
  Phone                                                  String?    @map("ContactPhone") @db.VarChar(30)
  Email                                                  String?    @map("ContactEmail") @db.VarChar(80)
  Role                                                   String?    @map("ContactRole") @db.VarChar(30)
  RoleIndex                                              String     @default("") @map("ContactRoleIndex") @db.VarChar(1)
  VenueRoleId                                            Int        @map("ContactVenueRoleId")
  DealMemo_DealMemo_DeMoBOMVenueContactIdToVenueContact  DealMemo[] @relation("DealMemo_DeMoBOMVenueContactIdToVenueContact")
  DealMemo_DealMemo_DeMoTechVenueContactIdToVenueContact DealMemo[] @relation("DealMemo_DeMoTechVenueContactIdToVenueContact")
  VenueRole                                              VenueRole  @relation(fields: [VenueRoleId], references: [Id], onUpdate: Restrict, map: "VenueRole_VenueContact")
  Venue                                                  Venue      @relation(fields: [VenueId], references: [Id], onUpdate: Restrict, map: "Venue_VenueContact")

  @@index([VenueRoleId], map: "VenueRole_VenueContact")
  @@index([VenueId], map: "Venue_Contact_idx")
}

model VenueRole {
  Id           Int            @id @default(autoincrement()) @map("VenueRoleId")
  Name         String         @unique(map: "VenueRole_RoleName_uq") @map("VenueRoleName") @db.VarChar(30)
  IsStandard   Boolean        @map("VenueRoleIsStandard") @db.Bit(1)
  VenueContact VenueContact[]
}

model DateBlock {
  Id           Int          @id @default(autoincrement()) @map("DateBlockId")
  ProductionId Int          @map("DateBlockProductionId")
  Name         String       @map("DateBlockName") @db.VarChar(45)
  StartDate    DateTime     @map("DateBlockStartDate") @db.Date
  EndDate      DateTime     @map("DateBlockEndDate") @db.Date
  IsPrimary    Boolean      @default(dbgenerated("(b'0')")) @map("DateBlockIsPrimary") @db.Bit(1)
  Booking      Booking[]
  Production   Production   @relation(fields: [ProductionId], references: [Id], onDelete: Cascade, map: "Production_DateBlock")
  GetInFitUp   GetInFitUp[]
  Other        Other[]
  Rehearsal    Rehearsal[]

  @@unique([ProductionId, Name], map: "DateBlockName")
  @@unique([ProductionId, StartDate], map: "SECONDARY")
}

model GetInFitUp {
  Id          Int       @unique(map: "GetInFitUpDay_UNIQUE") @default(autoincrement()) @map("GetInFitUpId")
  DateBlockId Int       @map("GetInFitUpDateBlockId")
  VenueId     Int?      @map("GetInFitUpVenueId")
  StatusCode  String    @default("U") @map("GetInFitUpStatusCode") @db.Char(1)
  Date        DateTime  @map("GetInFitUpDate") @db.Date
  Notes       String?   @map("GetInFitUpNotes") @db.LongText
  PencilNum   Int?      @map("GetInFitUpPencilNum")
  RunTag      String    @map("GetInFitUpRunTag") @db.Char(8)
  DateBlock   DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_GetInFitUp")
  Venue       Venue?    @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_GetInFitUp")

  @@index([DateBlockId], map: "DateBlock_GetInFitUpDay_idx")
  @@index([VenueId], map: "Venue_GetInFitUpDay_idx")
}

model Other {
  Id          Int       @id @default(autoincrement()) @map("OtherId")
  DateBlockId Int       @map("OtherDateBlockId")
  DateTypeId  Int       @map("OtherDateTypeId")
  StatusCode  String    @map("OtherStatusCode") @db.Char(1)
  Date        DateTime  @map("OtherDate") @db.Date
  Notes       String?   @map("OtherNotes") @db.LongText
  PencilNum   Int?      @map("OtherPencilNum")
  RunTag      String    @map("OtherRunTag") @db.Char(8)
  DateBlock   DateBlock @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Other")
  DateType    DateType  @relation(fields: [DateTypeId], references: [Id], onUpdate: Restrict, map: "DateType_Other")

  @@index([DateBlockId], map: "DateBlock_OtherDay_idx")
  @@index([DateTypeId], map: "OtherDayType_idx")
}

model Performance {
  Id                Int                 @id @default(autoincrement()) @map("PerformanceId")
  BookingId         Int                 @map("PerformanceBookingId")
  Time              DateTime?           @map("PerformanceTime") @db.Time(0)
  Date              DateTime            @map("PerformanceDate") @db.Date
  AvailableComp     AvailableComp[]
  Booking           Booking             @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "Booking_Performance")
  PerformanceReport PerformanceReport[]
  SalesSet          SalesSet[]

  @@index([BookingId], map: "Booking_Performance_fk")
  @@index([BookingId, Time, Date], map: "SECONDARY")
}

model Rehearsal {
  Id          Int               @id @default(autoincrement()) @map("RehearsalId")
  DateBlockId Int               @map("RehearsalDateBlockId")
  Town        String?           @map("RehearsalTown") @db.VarChar(50)
  StatusCode  String            @default("U") @map("RehearsalStatusCode") @db.Char(1)
  Date        DateTime          @map("RehearsalDate") @db.Date
  DateTypeId  Int               @default(1) @map("RehearsalDateTypeId")
  VenueId     Int?              @map("RehearsalVenueId")
  Notes       String?           @map("RehearsalNotes") @db.LongText
  PencilNum   Int?              @map("RehearsalPencilNum")
  RunTag      String            @map("RehearsalRunTag") @db.Char(8)
  DateBlock   DateBlock         @relation(fields: [DateBlockId], references: [Id], onDelete: Cascade, map: "DateBlock_Rehearsal")
  DateType    RehearsalDateType @relation(fields: [DateTypeId], references: [RehearsalDateTypeId], map: "DateType_Rehearsal")
  Venue       Venue?            @relation(fields: [VenueId], references: [Id], onDelete: Restrict, map: "Venue_Rehearsal")

  @@index([DateBlockId], map: "DateBlock_Rehearsal_idx")
  @@index([DateTypeId], map: "DateType_Rehearsal_idx")
  @@index([VenueId], map: "Venue_Rehearsal")
}

model AvailableComp {
  Id                 Int              @id @default(autoincrement()) @map("AvailableCompId")
  PerformanceId      Int              @map("AvailableCompPerformanceId")
  Seats              Int              @default(1) @map("AvailableCompSeats") @db.TinyInt
  AvailableCompNotes String?          @db.LongText
  Performance        Performance      @relation(fields: [PerformanceId], references: [Id], onDelete: Cascade, map: "PerformanceMayHaveAvailableComps")
  CompAllocation     CompAllocation[]

  @@index([PerformanceId], map: "fkBooking_BookingPromoterHoldAvailable")
}

model BookedVenueHistory {
  BVHistoryId Int      @id @default(autoincrement())
  BVBookingId Int
  BVVenueId   Int
  BVUpdateDT  DateTime @db.DateTime(0)
  Booking     Booking  @relation(fields: [BVBookingId], references: [Id], onDelete: Cascade, map: "Booking_History")
  Venue       Venue    @relation(fields: [BVVenueId], references: [Id], map: "Venue_History")

  @@index([BVBookingId], map: "Booking_BookingHistory")
  @@index([BVVenueId], map: "Venue_History_idx")
}

model CompAllocation {
  Id                     Int           @id @default(autoincrement()) @map("CompAllocationId")
  AvailableCompId        Int           @map("CompAllocationAvailableCompId")
  TicketHolderName       String        @map("CompAllocationTicketHolderName") @db.VarChar(50)
  Seats                  Int           @default(1) @map("CompAllocationSeats") @db.UnsignedSmallInt
  Comments               String?       @map("CompAllocationComments") @db.VarChar(100)
  RequestedBy            String?       @map("CompAllocationRequestedBy") @db.VarChar(50)
  ArrangedByAccUserId    Int           @map("CompAllocationArrangedByAccUserId")
  VenueConfirmationNotes String?       @map("CompAllocationVenueConfirmationNotes") @db.Text
  TicketHolderEmail      String?       @map("CompAllocationTicketHolderEmail") @db.VarChar(80)
  SeatsAllocated         String?       @map("CompAllocationSeatsAllocated") @db.VarChar(50)
  AvailableComp          AvailableComp @relation(fields: [AvailableCompId], references: [Id], onDelete: Cascade, map: "AvailableCompsMayBeAllocated")

  @@index([AvailableCompId], map: "AvailableCompsMayBeAllocated")
  @@index([ArrangedByAccUserId], map: "Master_AccountUser_CompAllocation")
}

model CompType {
  CompTypeId    Int       @id @default(autoincrement())
  CompTypeName  String    @unique(map: "CompName") @db.VarChar(30)
  CompTypeCode  String    @db.VarChar(5)
  CompTypeSeqNo Int
  SetComp       SetComp[]
}

model ConversionRate {
  Id               Int        @id @default(autoincrement()) @map("ConversionId")
  FromCurrencyCode String     @map("ConversionFromCurrencyCode") @db.VarChar(3)
  ToCurrencyCode   String     @map("ConversionToCurrencyCode") @db.VarChar(3)
  ProductionId     Int        @map("ConversionProductionId")
  Rate             Decimal    @map("ConversionRate") @db.Decimal(8, 4)
  Production       Production @relation(fields: [ProductionId], references: [Id], onDelete: Cascade, map: "Production_ConversionRate")

  @@index([ProductionId], map: "Production_ConversionDate_idx")
  @@index([FromCurrencyCode], map: "Master_Currency_ConversionRate_From")
  @@index([ToCurrencyCode], map: "Master_Currency_ConversionRate_To")
}

model HoldType {
  HoldTypeId    Int            @id @default(autoincrement())
  HoldTypeName  String         @unique(map: "HoldName") @db.VarChar(30)
  HoldTypeCode  String         @db.VarChar(5)
  HoldTypeSeqNo Int
  DealMemoHold  DealMemoHold[]
  SetHold       SetHold[]
}

model ParsedEmail {
  ParsedEmailId         Int      @id @default(autoincrement())
  ParsedEmailTo         String   @db.VarChar(150)
  ParsedEmailFrom       String   @db.VarChar(150)
  ParsedEmailSubject    String   @db.VarChar(10)
  ParsedEmailDate       DateTime @db.Date
  ParsedEmailContent    String   @db.LongText
  ParsedEmailsCreatedAt DateTime @db.DateTime(0)
  ParsedEmailsUpdatedAt DateTime @db.DateTime(0)
}

model Sale {
  SaleId         Int       @id @default(autoincrement())
  SaleSaleTypeId Int?
  SaleSetId      Int?
  SaleSeats      Int?
  SaleValue      Decimal?  @db.Decimal(10, 2)
  SalesSet       SalesSet? @relation(fields: [SaleSetId], references: [SetId], onDelete: Cascade, map: "SaleSet_Sale")
  SaleType       SaleType? @relation(fields: [SaleSaleTypeId], references: [SaleTypeId], onDelete: Cascade, map: "SaleType_Sale")

  @@unique([SaleSetId, SaleSaleTypeId], map: "Sale_SetType_Unique")
  @@index([SaleSetId], map: "SaleType_Sale_idx")
  @@index([SaleSaleTypeId], map: "BookingSale_Sale_idx")
}

model SaleType {
  SaleTypeId   Int    @id @default(autoincrement())
  SaleTypeName String @db.VarChar(45)
  Sale         Sale[]
}

model SalesSet {
  SetId                       Int          @id @default(autoincrement())
  SetBookingId                Int
  SetPerformanceId            Int?
  SetSalesFiguresDate         DateTime     @db.Date
  SetBrochureReleased         Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetSingleSeats              Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetNotOnSale                Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsFinalFigures           Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetFinalSalesApprovedByUser String?      @db.VarChar(100)
  SetIsCopy                   Boolean      @default(dbgenerated("(b'0')")) @db.Bit(1)
  Sale                        Sale[]
  Booking                     Booking      @relation(fields: [SetBookingId], references: [Id], onDelete: Cascade, map: "Booking_BookingSale")
  Performance                 Performance? @relation(fields: [SetPerformanceId], references: [Id], onDelete: Cascade, map: "Performance_SalesSet")
  SetComp                     SetComp[]
  SetHold                     SetHold[]

  @@unique([SetBookingId, SetSalesFiguresDate, SetPerformanceId], map: "SaleSet_Unique")
  @@index([SetPerformanceId], map: "Performance_SalesSet")
}

model SetComp {
  SetCompId         Int      @id @default(autoincrement())
  SetCompSetId      Int
  SetCompCompTypeId Int
  SetCompSeats      Int      @default(0)
  CompType          CompType @relation(fields: [SetCompCompTypeId], references: [CompTypeId], map: "CompType_SetComp")
  SalesSet          SalesSet @relation(fields: [SetCompSetId], references: [SetId], onDelete: Cascade, map: "SalesSet_SetComp")

  @@unique([SetCompId, SetCompCompTypeId], map: "SetComp_SetCompType_unique")
  @@index([SetCompCompTypeId], map: "CompType_SetComp")
  @@index([SetCompSetId], map: "SalesSet_SetComp_idx")
}

model SetHold {
  SetHoldId         Int      @id @default(autoincrement())
  SetHoldSetId      Int
  SetHoldHoldTypeId Int
  SetHoldSeats      Int      @default(0)
  SetHoldValue      Decimal? @db.Decimal(8, 2)
  HoldType          HoldType @relation(fields: [SetHoldHoldTypeId], references: [HoldTypeId], map: "HoldType_SetHold")
  SalesSet          SalesSet @relation(fields: [SetHoldSetId], references: [SetId], onDelete: Cascade, map: "SalesSet_SetHold")

  @@unique([SetHoldId, SetHoldHoldTypeId], map: "SetHold_SetHoldType_unique")
  @@index([SetHoldHoldTypeId], map: "HoldType_SetHold")
  @@index([SetHoldSetId], map: "SalesSet_SetHold_idx")
}

model VenueAddress {
  Id        Int      @id @default(autoincrement()) @map("VenueAddressId")
  VenueId   Int      @map("VenueAddressVenueId")
  TypeName  String   @map("VenueAddressTypeName") @db.VarChar(15)
  Line1     String?  @map("VenueAddress1") @db.VarChar(50)
  Line2     String?  @map("VenueAddress2") @db.VarChar(50)
  Line3     String?  @map("VenueAddress3") @db.VarChar(50)
  Town      String?  @map("VenueAddressTown") @db.VarChar(50)
  County    String?  @map("VenueAddressCounty") @db.VarChar(50)
  Postcode  String?  @map("VenueAddressPostcode") @db.VarChar(12)
  CountryId Int?     @map("VenueAddressCountryId")
  Phone     String?  @map("VenueAddressPhone") @db.VarChar(30)
  Email     String?  @map("VenueAddressEmail") @db.VarChar(80)
  Latitude  Int?     @map("VenueAddressLat") @db.MediumInt
  Longitude Int?     @map("VenueAddressLong") @db.MediumInt
  Country   Country? @relation(fields: [CountryId], references: [Id], onDelete: Restrict, map: "CountryVenueAddress")
  Venue     Venue    @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VenueAddress")

  @@index([VenueId], map: "Venue_VenueAddress")
  @@index([CountryId], map: "CountryVenueAddress")
}

model PerformanceReport {
  Id                  Int         @id @default(autoincrement()) @map("PRId")
  PerformanceId       Int         @map("PRPerformanceId")
  Act1UpTime          DateTime?   @map("PRAct1UpTime") @db.Time(0)
  Act1DownTime        DateTime?   @map("PRAct1DownTime") @db.Time(0)
  Interval1UpTime     DateTime?   @map("PRInterval1UpTime") @db.Time(0)
  Interval1DownTime   DateTime?   @map("PRInterval1DownTime") @db.Time(0)
  Act2UpTime          DateTime?   @map("PRAct2UpTime") @db.Time(0)
  Act2DownTime        DateTime?   @map("PRAct2DownTime") @db.Time(0)
  GetOutTime          DateTime?   @map("PRGetOutTime") @db.Time(0)
  GetOutUpTime        DateTime?   @map("PRGetOutUpTime") @db.Time(0)
  GetOutDownTime      DateTime?   @map("PRGetOutDownTime") @db.Time(0)
  Absences            String?     @map("PRAbsences") @db.Text
  Illness             String?     @map("PRIllness") @db.Text
  TechnicalNotes      String?     @map("PRTechnicalNotes") @db.Text
  PerformanceNotes    String?     @map("PRPerformanceNotes") @db.Text
  SetPropCostumeNotes String?     @map("PRSetPropCostumeNotes") @db.Text
  AudienceNotes       String?     @map("PRAudienceNotes") @db.Text
  MerchandiseNotes    String?     @map("PRMerchandiseNotes") @db.Text
  GeneralRemarks      String?     @map("PRGeneralRemarks") @db.Text
  Performance         Performance @relation(fields: [PerformanceId], references: [Id], onDelete: Cascade, map: "Performance_PerformanceReport")

  @@index([PerformanceId], map: "Performance_PerformanceReport")
}

model DBSetting {
  DBSettingId    Int    @id @default(autoincrement()) @map("DBSettingId")
  DBSettingName  String @unique(map: "SettingName") @map("DBSettingName") @db.VarChar(50)
  DBSettingValue String @map("DBSettingValue") @db.VarChar(255)
}

model MasterTask {
  Id                             Int               @id @default(autoincrement()) @map("MasterTaskId")
  Code                           Int               @unique(map: "MasterTask_TaskCode_Unique") @map("TaskCode") @db.SmallInt
  Name                           String            @map("TaskName") @db.VarChar(80)
  CopiedFrom                     String?           @map("TaskCopiedFrom") @db.Char(1)
  CopiedId                       Int?              @map("TaskCopiedId")
  Priority                       Int               @default(0) @map("TaskPriority") @db.TinyInt
  Notes                          String?           @map("TaskNotes") @db.VarChar(500)
  TaskAssignedToAccUserId        Int?
  StartByWeekNum                 Int?              @map("TaskStartByWeekNum") @db.SmallInt
  TaskStartByIsPostProduction    Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  CompleteByWeekNum              Int?              @map("TaskCompleteByWeekNum") @db.SmallInt
  TaskCompleteByIsPostProduction Boolean           @default(dbgenerated("(b'0')")) @db.Bit(1)
  MTRId                          Int?              @map("TaskMTRId")
  MasterTaskRepeat               MasterTaskRepeat? @relation(fields: [MTRId], references: [Id], onDelete: Cascade, map: "MasterTaskRepeat_MasterTask")

  @@index([MTRId], map: "MasterTaskRepeat_MasterTask")
  @@index([TaskAssignedToAccUserId], map: "Master_AccountUser_MasterTask")
}

model AccountUserProduction {
  AUPId           Int        @id @default(autoincrement())
  AUPAccUserId    Int
  AUPProductionId Int
  Production      Production @relation(fields: [AUPProductionId], references: [Id], onDelete: Cascade, map: "Production_AccountUserProduction")

  @@index([AUPProductionId], map: "Production_AccountUserProduction")
  @@index([AUPAccUserId], map: "Master_AccountUser_AccountUserProduction")
}

model Production {
  Id                    Int                     @id @default(autoincrement()) @map("ProductionId")
  ShowId                Int                     @map("ProductionShowId")
  Code                  String                  @map("ProductionCode") @db.VarChar(10)
  SalesEmail            String?                 @map("ProductionSalesEmail") @db.VarChar(80)
  IsArchived            Boolean                 @default(dbgenerated("(b'0')")) @map("ProductionIsArchived") @db.Bit(1)
  IsDeleted             Boolean                 @default(dbgenerated("(b'0')")) @map("ProductionIsDeleted") @db.Bit(1)
  SalesFrequency        String                  @default("W") @map("ProductionSalesFrequency") @db.Char(1)
  RunningTime           DateTime?               @map("ProductionRunningTime") @db.Time(0)
  RunningTimeNote       String?                 @map("ProductionRunningTimeNote") @db.VarChar(80)
  LogoFileId            Int?                    @map("ProductionLogoFileId")
  ReportCurrencyCode    String                  @map("ProductionReportCurrencyCode") @db.VarChar(3)
  ProdCoId              Int?                    @map("ProductionProdCoId")
  ACCContract           ACCContract[]
  AccountUserProduction AccountUserProduction[]
  ConversionRate        ConversionRate[]
  DateBlock             DateBlock[]
  File                  File?                   @relation(fields: [LogoFileId], references: [Id], onDelete: NoAction, map: "File_Production")
  Show                  Show                    @relation(fields: [ShowId], references: [Id], map: "ShowMayHaveProduction")
  ProductionFile        ProductionFile[]
  ProductionRegion      ProductionRegion[]
  ProductionTask        ProductionTask[]

  @@unique([Code, ShowId], map: "SECONDARY")
  @@index([ShowId], map: "Show_Production")
  @@index([ReportCurrencyCode], map: "Master_Currency_Production")
  @@index([LogoFileId], map: "Master_File_Production")
  @@index([ProdCoId], map: "Master_ProductionCompany_Production")
}

model ProductionTask {
  Id                         Int                   @id @default(autoincrement()) @map("ProductionTaskId")
  ProductionId               Int
  Code                       Int                   @map("TaskCode") @db.SmallInt
  Name                       String                @map("TaskName") @db.VarChar(80)
  CopiedFrom                 String?               @map("TaskCopiedFrom") @db.Char(1)
  CopiedId                   Int?                  @map("TaskCopiedId")
  Priority                   Int                   @default(0) @map("TaskPriority") @db.TinyInt
  Notes                      String?               @map("TaskNotes") @db.VarChar(500)
  Progress                   Int                   @default(0) @map("TaskProgress") @db.TinyInt
  TaskAssignedToAccUserId    Int?
  CompleteByIsPostProduction Boolean               @default(dbgenerated("(b'0')")) @map("TaskCompleteByIsPostProduction") @db.Bit(1)
  StartByWeekNum             Int?                  @map("TaskStartByWeekNum") @db.SmallInt
  StartByIsPostProduction    Boolean               @default(dbgenerated("(b'0')")) @map("TaskStartByIsPostProduction") @db.Bit(1)
  CompleteByWeekNum          Int?                  @map("TaskCompleteByWeekNum") @db.SmallInt
  TaskCompletedDate          DateTime?             @db.Date
  PRTId                      Int?                  @map("TaskPRTId")
  ProductionTaskRepeat       ProductionTaskRepeat? @relation(fields: [PRTId], references: [Id], onDelete: Cascade, map: "ProductionTaskRepeat_ProductionTask")
  Production                 Production            @relation(fields: [ProductionId], references: [Id], onDelete: Cascade, map: "Production_ProductionTask")

  @@unique([ProductionId, Code], map: "ProductionTask_Production_TaskCode_Unique")
  @@index([ProductionId], map: "Production_ProductionTask_fk")
  @@index([PRTId], map: "ProductionTaskRepeat_ProductionTask")
  @@index([TaskAssignedToAccUserId], map: "Master_AccountUser_ProductionTask")
}

model Country {
  Id                                                 Int               @id @default(autoincrement()) @map("CountryId")
  Code                                               String            @map("CountryCode") @db.VarChar(3)
  Name                                               String            @map("CountryName") @db.VarChar(40)
  CurrencyCode                                       String?           @map("CountryCurrencyCode") @db.VarChar(3)
  Address                                            Address[]
  CountryInRegion                                    CountryInRegion[]
  Person_Person_PersonExpensesBankCountryIdToCountry Person[]          @relation("Person_PersonExpensesBankCountryIdToCountry")
  Person_Person_PersonPaymentBankCountryIdToCountry  Person[]          @relation("Person_PersonPaymentBankCountryIdToCountry")
  VenueAddress                                       VenueAddress[]

  @@index([CurrencyCode], map: "Master_Currency_Country")
}

model CountryInRegion {
  CountryId Int     @map("CIRCountryId")
  RegionId  Int     @map("CIRRegionId")
  Country   Country @relation(fields: [CountryId], references: [Id], onDelete: Cascade, map: "Country_CountryInRegion")
  Region    Region  @relation(fields: [RegionId], references: [Id], map: "Region_CountryInRegion")

  @@id([CountryId, RegionId])
  @@index([RegionId], map: "Region_CountryInRegion")
}

model ProductionRegion {
  PRProductionId Int
  PRRegionId     Int
  Production     Production @relation(fields: [PRProductionId], references: [Id], onDelete: Cascade, map: "ProductionHasProductionRegion")
  Region         Region     @relation(fields: [PRRegionId], references: [Id], onDelete: Cascade, map: "RegionHasProductionRegion")

  @@id([PRProductionId, PRRegionId])
  @@index([PRRegionId], map: "RegionHasProductionRegion")
}

model Region {
  Id               Int                @id @default(autoincrement()) @map("RegionId")
  Name             String             @map("RegionName") @db.VarChar(50)
  CountryInRegion  CountryInRegion[]
  ProductionRegion ProductionRegion[]
}

model RehearsalDateType {
  RehearsalDateTypeId                  Int         @id
  RehearsalDateTypeName                String      @db.VarChar(30)
  RehearsalDateTypeAffectsAvailability Boolean     @default(dbgenerated("(b'0')")) @db.Bit(1)
  RehearsalDateTypeSeqNo               Int?        @db.UnsignedTinyInt
  Rehearsal                            Rehearsal[]
}

model VenueFamily {
  Id    Int     @id @default(autoincrement()) @map("VenueFamilyId")
  Name  String  @map("VenueFamilyName") @db.VarChar(50)
  Venue Venue[]
}

model DealMemo {
  Id                                                         Int                           @id @default(autoincrement()) @map("DeMoId")
  BookingId                                                  Int                           @unique(map: "DealMemoBooking") @map("DeMoBookingId")
  Status                                                     String?                       @map("DeMoStatus") @db.VarChar(4)
  DateIssued                                                 DateTime?                     @map("DeMoDateIssued") @db.Date
  DateReturned                                               DateTime?                     @map("DeMoDateReturned") @db.Date
  ApprovedBy                                                 String?                       @map("DeMoApprovedBy") @db.VarChar(100)
  CompletedBy                                                String?                       @map("DeMoCompletedBy") @db.VarChar(100)
  Notes                                                      String?                       @map("DeMoNotes") @db.LongText
  AccContId                                                  Int?                          @map("DeMoAccContId")
  RunningTime                                                DateTime?                     @map("DeMoRunningTime") @db.Time(0)
  RunningTimeNotes                                           String?                       @map("DeMoRunningTimeNotes") @db.VarChar(80)
  PrePostShowEvents                                          String?                       @map("DeMoPrePostShowEvents") @db.LongText
  VenueCurfewTime                                            DateTime?                     @map("DeMoVenueCurfewTime") @db.Time(0)
  PerformanceNotes                                           String?                       @map("DeMoPerformanceNotes") @db.LongText
  ProgrammerVenueContactId                                   Int?                          @map("DeMoProgrammerVenueContactId")
  VatCode                                                    String?                       @map("DeMoVatCode") @db.VarChar(20)
  ROTTPercentage                                             Decimal?                      @map("DeMoROTTPercentage") @db.Decimal(5, 2)
  PRSPercentage                                              Decimal?                      @map("DeMoPRSPercentage") @db.Decimal(5, 2)
  Guarantee                                                  Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoGuarantee") @db.Bit(1)
  GuaranteeAmount                                            Decimal?                      @map("DeMoGuaranteeAmount") @db.Decimal(10, 2)
  HasCalls                                                   Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoHasCalls") @db.Bit(1)
  PromoterSplitPercentage                                    Decimal?                      @map("DeMoPromoterSplitPercentage") @db.Decimal(5, 2)
  VenueSplitPercentage                                       Decimal?                      @map("DeMoVenueSplitPercentage") @db.Decimal(5, 2)
  VenueRental                                                Decimal?                      @map("DeMoVenueRental") @db.Decimal(10, 2)
  VenueRentalNotes                                           String?                       @map("DeMoVenueRentalNotes") @db.VarChar(80)
  StaffingContra                                             Decimal?                      @map("DeMoStaffingContra") @db.Decimal(10, 2)
  StaffingContraNotes                                        String?                       @map("DeMoStaffingContraNotes") @db.VarChar(80)
  AgreedContraItems                                          Decimal?                      @map("DeMoAgreedContraItems") @db.Decimal(10, 2)
  AgreedContraItemsNotes                                     String?                       @map("DeMoAgreedContraItemsNotes") @db.VarChar(80)
  BOMVenueContactId                                          Int?                          @map("DeMoBOMVenueContactId")
  OnSaleDate                                                 DateTime?                     @map("DeMoOnSaleDate") @db.Date
  SettlementVenueContactId                                   Int?                          @map("DeMoSettlementVenueContactId")
  SellableSeats                                              Float?                        @map("DeMoSellableSeats")
  MixerDeskPosition                                          String?                       @map("DeMoMixerDeskPosition") @db.VarChar(80)
  StandardSeatKills                                          String?                       @map("DeMoStandardSeatKills") @db.VarChar(80)
  RestorationLevy                                            Decimal?                      @map("DeMoRestorationLevy") @db.Decimal(10, 2)
  BookingFees                                                Decimal?                      @map("DeMoBookingFees") @db.Decimal(10, 2)
  CCCommissionPercent                                        Decimal?                      @map("DeMoCCCommissionPercent") @db.Decimal(5, 2)
  TxnChargeOption                                            String?                       @map("DeMoTxnChargeOption") @db.VarChar(15)
  TxnChargeAmount                                            Decimal?                      @map("DeMoTxnChargeAmount") @db.Decimal(10, 2)
  AgreedDiscounts                                            String?                       @map("DeMoAgreedDiscounts") @db.VarChar(80)
  MaxTAAlloc                                                 String?                       @map("DeMoMaxTAAlloc") @db.VarChar(80)
  TAAlloc                                                    String?                       @map("DeMoTAAlloc") @db.VarChar(80)
  TicketCopy                                                 String?                       @map("DeMoTicketCopy") @db.VarChar(80)
  ProducerCompCount                                          Int?                          @map("DeMoProducerCompCount") @db.UnsignedSmallInt
  OtherHolds                                                 String?                       @map("DeMoOtherHolds") @db.VarChar(80)
  AgeNotes                                                   String?                       @map("DeMoAgeNotes") @db.VarChar(80)
  SalesDayNum                                                Int?                          @map("DeMoSalesDayNum") @db.TinyInt
  MMVenueContactId                                           Int?                          @map("DeMoMMVenueContactId")
  BrochureDeadline                                           DateTime?                     @map("DeMoBrochureDeadline") @db.Date
  FinalProofBy                                               DateTime?                     @map("DeMoFinalProofBy") @db.Date
  PrintReqs                                                  String?                       @map("DeMoPrintReqs") @db.LongText
  LocalMarketingBudget                                       Decimal?                      @map("DeMoLocalMarketingBudget") @db.Decimal(10, 2)
  LocalMarketingContra                                       Decimal?                      @map("DeMoLocalMarketingContra") @db.Decimal(10, 2)
  SellWho                                                    String?                       @map("DeMoSellWho") @db.VarChar(10)
  SellProgrammes                                             Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoSellProgrammes") @db.Bit(1)
  SellMerch                                                  Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoSellMerch") @db.Bit(1)
  MerchNotes                                                 String?                       @map("DeMoMerchNotes") @db.LongText
  SellProgCommPercent                                        Decimal?                      @map("DeMoSellProgCommPercent") @db.Decimal(5, 2)
  SellMerchCommPercent                                       Decimal?                      @map("DeMoSellMerchCommPercent") @db.Decimal(5, 2)
  SellPitchFee                                               Decimal?                      @map("DeMoSellPitchFee") @db.Decimal(10, 2)
  TechVenueContactId                                         Int?                          @map("DeMoTechVenueContactId")
  TechArrivalDate                                            DateTime?                     @map("DeMoTechArrivalDate") @db.Date
  TechArrivalTime                                            DateTime?                     @map("DeMoTechArrivalTime") @db.Time(0)
  DressingRooms                                              String?                       @map("DeMoDressingRooms") @db.VarChar(100)
  NumFacilitiesLaundry                                       Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoNumFacilitiesLaundry") @db.Bit(1)
  NumFacilitiesDrier                                         Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoNumFacilitiesDrier") @db.Bit(1)
  NumFacilitiesLaundryRoom                                   Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoNumFacilitiesLaundryRoom") @db.Bit(1)
  NumFacilitiesNotes                                         String?                       @map("DeMoNumFacilitiesNotes") @db.VarChar(80)
  NumCateringNotes                                           String?                       @map("DeMoNumCateringNotes") @db.VarChar(80)
  BarringClause                                              String?                       @map("DeMoBarringClause") @db.VarChar(80)
  AdvancePaymentRequired                                     Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoAdvancePaymentRequired") @db.Bit(1)
  AdvancePaymentAmount                                       Decimal?                      @map("DeMoAdvancePaymentAmount") @db.Decimal(10, 2)
  AdvancePaymentDueBy                                        DateTime?                     @map("DeMoAdvancePaymentDueBy") @db.Date
  SettlementDays                                             Int?                          @map("DeMoSettlementDays") @db.TinyInt
  ContractClause                                             String?                       @map("DeMoContractClause") @db.LongText
  PrintDelVenueAddressLine                                   String?                       @map("DeMoPrintDelVenueAddressLine") @db.LongText
  PrintDelUseVenueAddress                                    Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoPrintDelUseVenueAddress") @db.Bit(1)
  CompAccContId                                              Int?                          @map("DeMoCompAccContId")
  SeatKillNotes                                              String?                       @map("DeMoSeatKillNotes") @db.LongText
  SettlementSameDay                                          Boolean                       @default(dbgenerated("(b'0')")) @map("DeMoSettlementSameDay") @db.Bit(1)
  Booking                                                    Booking                       @relation(fields: [BookingId], references: [Id], onDelete: Cascade, map: "BookingDealMemo")
  VenueContact_DealMemo_DeMoBOMVenueContactIdToVenueContact  VenueContact?                 @relation("DealMemo_DeMoBOMVenueContactIdToVenueContact", fields: [BOMVenueContactId], references: [Id], onDelete: Cascade, map: "VenueContactDealMemoBOM")
  VenueContact_DealMemo_DeMoTechVenueContactIdToVenueContact VenueContact?                 @relation("DealMemo_DeMoTechVenueContactIdToVenueContact", fields: [TechVenueContactId], references: [Id], onDelete: Cascade, map: "VenueContactDealMemoTech")
  DealMemoCall                                               DealMemoCall[]
  DealMemoHold                                               DealMemoHold[]
  DealMemoPrice                                              DealMemoPrice[]
  DealMemoSalesEmailRecipient                                DealMemoSalesEmailRecipient[]
  DealMemoTechProvision                                      DealMemoTechProvision[]

  @@index([BOMVenueContactId], map: "VenueContactDealMemoBOM")
  @@index([TechVenueContactId], map: "VenueContactDealMemoTech")
  @@index([AccContId], map: "AccountContactDealMemo")
  @@index([CompAccContId], map: "Master_AccountContact_DealMemo_Comp")
}

model DealMemoCall {
  DMCId              Int      @id @default(autoincrement())
  DMCDeMoId          Int
  DMCCallNum         Int      @db.TinyInt
  DMCPromoterOrVenue String   @db.Char(1)
  DMCType            String   @db.Char(1)
  DMCValue           Decimal? @db.Decimal(10, 2)
  DealMemo           DealMemo @relation(fields: [DMCDeMoId], references: [Id], onDelete: Cascade, map: "DealMemoDealMemoCall")

  @@unique([DMCDeMoId, DMCCallNum], map: "DealMemoCallNum")
}

model DealMemoPrice {
  DMPId          Int      @id @default(autoincrement())
  DMPDeMoId      Int
  DMPTicketName  String   @db.VarChar(50)
  DMPNumTickets  Int?
  DMPTicketPrice Decimal? @db.Decimal(10, 2)
  DMPNotes       String?  @db.VarChar(80)
  DealMemo       DealMemo @relation(fields: [DMPDeMoId], references: [Id], onDelete: Cascade, map: "DealMemoDealMemoPrice")

  @@index([DMPDeMoId], map: "DealMemoDealMemoPrice")
}

model DealMemoTechProvision {
  DMTechId      Int      @id @default(autoincrement())
  DMTechDeMoId  Int
  DMTechName    String   @db.VarChar(30)
  DMTechVenue   String?  @db.VarChar(80)
  DMTechCompany String?  @db.VarChar(80)
  DealMemo      DealMemo @relation(fields: [DMTechDeMoId], references: [Id], onDelete: Cascade, map: "DealMemoDealMemoTechProvision")

  @@unique([DMTechDeMoId, DMTechName], map: "ProvisionName")
}

model File {
  Id                       Int              @id @default(autoincrement()) @map("FileId")
  OriginalFilename         String           @map("FileOriginalFilename") @db.VarChar(200)
  MediaType                String?          @map("FileMediaType") @db.VarChar(200)
  Location                 String           @map("FileLocation") @db.VarChar(512)
  UploadDateTime           DateTime         @map("FileUploadDateTime") @db.DateTime(0)
  UploadUserId             Int              @map("FileUploadUserId")
  SizeBytes                BigInt?          @map("FileSizeBytes")
  FileCreatedDateTime      DateTime?        @db.DateTime(0)
  FileLastModifiedDateTime DateTime?        @db.DateTime(0)
  ACCContract              ACCContract[]
  BookingFile              BookingFile[]
  Production               Production[]
  ProductionFile           ProductionFile[]
  Template                 Template[]

  @@index([UploadUserId], map: "UserAttachedFile")
}

model GlobalBookingActivity {
  Id                         Int                          @id @default(autoincrement()) @map("GlobalActivityId")
  ProductionId               Int                          @map("GlobalActivityProductionId")
  Date                       DateTime?                    @map("GlobalActivityDate") @db.Date
  Name                       String?                      @map("GlobalActivityName") @db.VarChar(30)
  ActivityTypeId             Int?                         @map("GlobalActivityActivityTypeId")
  Cost                       Decimal?                     @map("GlobalActivityCost") @db.Decimal(8, 2)
  FollowUpRequired           Boolean                      @default(dbgenerated("(b'0')")) @map("GlobalActivityFollowUpRequired") @db.Bit(1)
  DueByDate                  DateTime?                    @map("GlobalActivityDueByDate") @db.Date
  CreatedDT                  DateTime?                    @map("GlobalActivityCreatedDT") @db.Date
  Notes                      String?                      @map("GlobalActivityNotes") @db.LongText
  ActivityType               ActivityType?                @relation(fields: [ActivityTypeId], references: [Id], onDelete: Cascade, map: "GlobalActivityType_BookingActivity")
  GlobalBookingActivityVenue GlobalBookingActivityVenue[]

  @@index([ActivityTypeId], map: "GlobalActivityType_BookingActivity")
}

model ACCContract {
  ContractId           Int               @id @default(autoincrement()) @map("ACCContractId")
  PersonId             Int               @map("ACCCPersonId")
  RoleName             String            @map("ACCCRoleName") @db.VarChar(50)
  ContractStatus       String            @map("ACCCContractStatus") @db.VarChar(4)
  CompletedByAccUserId Int?              @map("ACCCCompletedByAccUserId")
  CheckedByAccUserId   Int?              @map("ACCCCheckedByAccUserId")
  DateIssued           DateTime?         @map("ACCCDateIssued") @db.Date
  DateReturned         DateTime?         @map("ACCCDateReturned") @db.Date
  ACCContractFileId    Int?
  ACCScheduleJSON      String?           @db.LongText
  Notes                String?           @map("ACCCNotes") @db.LongText
  CurrencyCode         String?           @map("ACCCCurrencyCode") @db.VarChar(3)
  FirstDay             DateTime?         @map("ACCCFirstDay") @db.Date
  LastDay              DateTime?         @map("ACCCLastDay") @db.Date
  Availability         String?           @map("ACCCAvailability") @db.LongText
  RehearsalLocation    String?           @map("ACCCRehearsalLocation") @db.VarChar(30)
  RehearsalVenueId     Int?              @map("ACCCRehearsalVenueId")
  RehearsalVenueNotes  String?           @map("ACCCRehearsalVenueNotes") @db.LongText
  IsAccomProvided      Boolean           @default(dbgenerated("(b'0')")) @map("ACCCIsAccomProvided") @db.Bit(1)
  AccomNotes           String?           @map("ACCCAccomNotes") @db.LongText
  IsTransportProvided  Boolean           @default(dbgenerated("(b'0')")) @map("ACCCIsTransportProvided") @db.Bit(1)
  TransportNotes       String?           @map("ACCCTransportNotes") @db.LongText
  IsNominatedDriver    Boolean           @default(dbgenerated("(b'0')")) @map("ACCCIsNominatedDriver") @db.Bit(1)
  NominatedDriverNotes String?           @map("ACCCNominatedDriverNotes") @db.LongText
  PaymentType          String?           @map("ACCCPaymentType") @db.VarChar(1)
  WeeklyRehFee         Decimal?          @map("ACCCWeeklyRehFee") @db.Decimal(10, 2)
  WeeklyRehHolPay      Decimal?          @map("ACCCWeeklyRehHolPay") @db.Decimal(10, 2)
  WeeklyPerfFee        Decimal?          @map("ACCCWeeklyPerfFee") @db.Decimal(10, 2)
  WeeklyPerfHolPay     Decimal?          @map("ACCCWeeklyPerfHolPay") @db.Decimal(10, 2)
  WeeklySubs           Decimal?          @map("ACCCWeeklySubs") @db.Decimal(10, 2)
  WeeklySubsNotes      String?           @map("ACCCWeeklySubsNotes") @db.LongText
  TotalFee             Decimal?          @map("ACCCTotalFee") @db.Decimal(10, 2)
  TotalHolPay          Decimal?          @map("ACCCTotalHolPay") @db.Decimal(10, 2)
  TotalFeeNotes        String?           @map("ACCCTotalFeeNotes") @db.LongText
  CancelFee            Decimal?          @map("ACCCCancelFee") @db.Decimal(10, 2)
  ProductionId         Int               @map("ACCCProductionId")
  ACCCDeptId           Int
  ACCCTemplateId       Int
  ACCClause            ACCClause[]
  ACCDepartment        ACCDepartment     @relation(fields: [ACCCDeptId], references: [ACCDeptId], map: "ACCDepartment_ACCContract")
  File                 File?             @relation(fields: [ACCContractFileId], references: [Id], onDelete: Cascade, map: "File_ACCContract")
  Person               Person            @relation(fields: [PersonId], references: [PersonId], map: "Person_ACCContract")
  Production           Production        @relation(fields: [ProductionId], references: [Id], onDelete: Cascade, map: "Production_ACCContract")
  Template             Template          @relation(fields: [ACCCTemplateId], references: [TemplateId], onDelete: NoAction, map: "Template_ACCContract")
  Venue                Venue?            @relation(fields: [RehearsalVenueId], references: [Id], onDelete: Cascade, map: "Venue_ACCContract")
  ACCContractData      ACCContractData[]
  ACCPayment           ACCPayment[]
  ACCPubEvent          ACCPubEvent[]

  @@index([RehearsalVenueId], map: "Venue_ACCContract")
  @@index([ProductionId], map: "Production_ACCContract")
  @@index([ACCCDeptId], map: "ACCDepartment_ACCContract")
  @@index([CheckedByAccUserId], map: "Master_AccountUser_AccContract_Checker")
  @@index([CompletedByAccUserId], map: "Master_AccountUser_AccContract_Completer")
  @@index([CurrencyCode], map: "Master_Currency_ACCContract")
  @@index([PersonId], map: "Person_ACCContract")
  @@index([ACCContractFileId], map: "File_ACCContract")
  @@index([ACCCTemplateId], map: "Template_ACCContract")
}

model Address {
  AddressId        Int      @id @default(autoincrement())
  Address1         String?  @db.VarChar(50)
  Address2         String?  @db.VarChar(50)
  Address3         String?  @db.VarChar(50)
  AddressTown      String?  @db.VarChar(50)
  AddressCounty    String?  @db.VarChar(50)
  AddressPostcode  String?  @db.VarChar(12)
  AddressCountryId Int?
  Country          Country? @relation(fields: [AddressCountryId], references: [Id], onDelete: Restrict, map: "Country_Address")
  Person           Person[]

  @@index([AddressCountryId], map: "Country_Address")
}

model DealMemoHold {
  DMHoldId         Int      @id @default(autoincrement())
  DMHoldDeMoId     Int
  DMHoldHoldTypeId Int
  DMHoldSeats      Int      @default(0)
  DMHoldValue      Decimal? @db.Decimal(8, 2)
  DealMemo         DealMemo @relation(fields: [DMHoldDeMoId], references: [Id], onDelete: Cascade, map: "DealMemo_DealMemoHold")
  HoldType         HoldType @relation(fields: [DMHoldHoldTypeId], references: [HoldTypeId], map: "HoldType_DMHold")

  @@unique([DMHoldId, DMHoldHoldTypeId], map: "DMHold_DMHoldType_unique")
  @@index([DMHoldDeMoId], map: "DealMemo_DealMemoHold")
  @@index([DMHoldHoldTypeId], map: "HoldType_DMHold")
}

model GlobalBookingActivityVenue {
  GlobalActivityId      Int                   @map("GBAVGlobalActivityId")
  VenueId               Int                   @map("GBAVVenueId")
  GlobalBookingActivity GlobalBookingActivity @relation(fields: [GlobalActivityId], references: [Id], onDelete: Cascade, map: "GlobalBookingActivity_GBAV")
  Venue                 Venue                 @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_GBAV")

  @@id([GlobalActivityId, VenueId])
  @@index([VenueId], map: "Venue_GBAV")
}

model Organisation {
  OrgId                                          Int      @id @default(autoincrement())
  OrgName                                        String   @db.VarChar(80)
  OrgWebsite                                     String?  @db.VarChar(255)
  OrgContactPersonId                             Int?
  Person_Organisation_OrgContactPersonIdToPerson Person?  @relation("Organisation_OrgContactPersonIdToPerson", fields: [OrgContactPersonId], references: [PersonId], onDelete: Cascade, map: "Person_Organisation")
  Person_Person_PersonAgencyOrgIdToOrganisation  Person[] @relation("Person_PersonAgencyOrgIdToOrganisation")

  @@index([OrgContactPersonId], map: "Person_Organisation")
}

model Person {
  PersonId                                             Int                @id @default(autoincrement())
  PersonFirstName                                      String             @db.VarChar(50)
  PersonLastName                                       String?            @db.VarChar(50)
  PersonEmail                                          String?            @db.VarChar(120)
  PersonAddressId                                      Int?
  PersonPhone                                          String?            @db.VarChar(30)
  PersonMobile                                         String?            @db.VarChar(30)
  PersonPassportName                                   String?            @db.VarChar(100)
  PersonPassportExpiryDate                             DateTime?          @db.Date
  PersonEligibleToWork                                 Boolean            @default(dbgenerated("(b'0')")) @db.Bit(1)
  PersonFEURequired                                    Boolean            @default(dbgenerated("(b'0')")) @db.Bit(1)
  PersonFEUCheckByAccUserId                            Int?
  PersonNotes                                          String?            @db.LongText
  PersonHealthNotes                                    String?            @db.LongText
  PersonAdvisoryNotes                                  String?            @db.LongText
  PersonRoleNotes                                      String?            @db.LongText
  PersonAgencyOrgId                                    Int?
  PersonPaymentTo                                      String?            @db.VarChar(1)
  PersonPaymentAccountName                             String?            @db.VarChar(80)
  PersonPaymentAccount                                 String?            @db.VarChar(8)
  PersonPaymentSortCode                                String?            @db.VarChar(8)
  PersonPaymentSWIFTBIC                                String?            @db.VarChar(11)
  PersonPaymentIBAN                                    String?            @db.VarChar(34)
  PersonPaymentBankCountryId                           Int?
  PersonExpensesTo                                     String?            @db.VarChar(1)
  PersonExpensesAccountName                            String?            @db.VarChar(80)
  PersonExpensesAccount                                String?            @db.VarChar(8)
  PersonExpensesSortCode                               String?            @db.VarChar(8)
  PersonExpensesSWIFTBIC                               String?            @db.VarChar(11)
  PersonExpensesIBAN                                   String?            @db.VarChar(34)
  PersonExpensesBankCountryId                          Int?
  PersonLastModified                                   DateTime?          @db.DateTime(0)
  ACCContract                                          ACCContract[]
  Organisation_Organisation_OrgContactPersonIdToPerson Organisation[]     @relation("Organisation_OrgContactPersonIdToPerson")
  Address                                              Address?           @relation(fields: [PersonAddressId], references: [AddressId], onDelete: Cascade, map: "Address_Person")
  Country_Person_PersonExpensesBankCountryIdToCountry  Country?           @relation("Person_PersonExpensesBankCountryIdToCountry", fields: [PersonExpensesBankCountryId], references: [Id], onDelete: Cascade, map: "Country_Person_ExpensesBank")
  Country_Person_PersonPaymentBankCountryIdToCountry   Country?           @relation("Person_PersonPaymentBankCountryIdToCountry", fields: [PersonPaymentBankCountryId], references: [Id], onDelete: Cascade, map: "Country_Person_PaymentBank")
  Organisation_Person_PersonAgencyOrgIdToOrganisation  Organisation?      @relation("Person_PersonAgencyOrgIdToOrganisation", fields: [PersonAgencyOrgId], references: [OrgId], onDelete: Restrict, map: "Organisation_Person_Agent")
  PersonOtherRole                                      PersonOtherRole[]
  PersonPerson_PersonPerson_PPPersonIdToPerson         PersonPerson[]     @relation("PersonPerson_PPPersonIdToPerson")
  PersonPerson_PersonPerson_PPRolePersonIdToPerson     PersonPerson[]     @relation("PersonPerson_PPRolePersonIdToPerson")
  PersonPersonRole                                     PersonPersonRole[]

  @@index([PersonAddressId], map: "Address_Person")
  @@index([PersonExpensesBankCountryId], map: "Country_Person_ExpensesBank")
  @@index([PersonPaymentBankCountryId], map: "Country_Person_PaymentBank")
  @@index([PersonAgencyOrgId], map: "Organisation_Person_Agent")
  @@index([PersonFEUCheckByAccUserId], map: "Master_AccountUser_Person")
}

model PersonOtherRole {
  PORId       Int    @id @default(autoincrement())
  PORPersonId Int
  PORName     String @db.VarChar(50)
  Person      Person @relation(fields: [PORPersonId], references: [PersonId], onDelete: Cascade, map: "Person_PersonOtherRole")

  @@unique([PORPersonId, PORName], map: "PersonOtherRole_UniqueRole")
}

model PersonPersonRole {
  PPRPersonId     Int
  PPRPersonRoleId Int
  PersonRole      PersonRole @relation(fields: [PPRPersonRoleId], references: [PersonRoleId], map: "PersonRole_PersonPersonRole")
  Person          Person     @relation(fields: [PPRPersonId], references: [PersonId], map: "Person_PersonPersonRole")

  @@id([PPRPersonId, PPRPersonRoleId])
  @@index([PPRPersonRoleId], map: "PersonRole_PersonPersonRole")
}

model PersonRole {
  PersonRoleId     Int                @id @default(autoincrement())
  PersonRoleName   String             @unique(map: "PersonRole_Unique") @db.VarChar(50)
  PersonPersonRole PersonPersonRole[]
}

model MasterTaskRepeat {
  Id                          Int          @id @default(autoincrement()) @map("MTRId")
  FromWeekNum                 Int          @map("MTRFromWeekNum") @db.SmallInt
  FromWeekNumIsPostProduction Boolean      @default(dbgenerated("(b'0')")) @map("MTRFromWeekNumIsPostProduction") @db.Bit(1)
  ToWeekNum                   Int          @map("MTRToWeekNum") @db.SmallInt
  ToWeekNumIsPostProduction   Boolean      @default(dbgenerated("(b'0')")) @map("MTRToWeekNumIsPostProduction") @db.Bit(1)
  Interval                    String       @map("MTRInterval") @db.VarChar(20)
  MasterTask                  MasterTask[]
}

model ProductionTaskRepeat {
  Id                          Int              @id @default(autoincrement()) @map("PTRId")
  FromWeekNum                 Int              @map("PTRFromWeekNum") @db.SmallInt
  FromWeekNumIsPostProduction Boolean          @default(dbgenerated("(b'0')")) @map("PTRFromWeekNumIsPostProduction") @db.Bit(1)
  ToWeekNum                   Int              @map("PTRToWeekNum") @db.SmallInt
  ToWeekNumIsPostProduction   Boolean          @default(dbgenerated("(b'0')")) @map("PTRToWeekNumIsPostProduction") @db.Bit(1)
  Interval                    String           @map("PRTInterval") @db.VarChar(20)
  ProductionTask              ProductionTask[]
}

model VenueFile {
  Id          Int     @id @default(autoincrement()) @map("VenueFileId")
  VenueId     Int     @map("VenueFileVenueId")
  FileId      Int     @map("VenueFileFileId")
  Type        String? @map("VenueFileType") @db.VarChar(20)
  Description String? @map("VenueFileDescription") @db.VarChar(80)
  Venue       Venue   @relation(fields: [VenueId], references: [Id], onDelete: Cascade, map: "Venue_VenueFile")

  @@index([VenueId], map: "Venue_VenueFile")
}

model ACCPayment {
  Id            Int         @id @default(autoincrement()) @map("PayId")
  ACCContractId Int         @map("PayACCContractId")
  Date          DateTime?   @map("PayDate") @db.Date
  Amount        Decimal?    @map("PayAmount") @db.Decimal(10, 2)
  Notes         String?     @map("PayNotes") @db.LongText
  ACCContract   ACCContract @relation(fields: [ACCContractId], references: [ContractId], onDelete: Cascade, map: "ACCContract_AACCPayment")

  @@index([ACCContractId], map: "ACCContract_AACCPayment")
}

model ACCPubEvent {
  Id            Int         @id @default(autoincrement()) @map("PEId")
  ACCContractId Int         @map("PEACCContractId")
  Date          DateTime?   @map("PEDate") @db.Date
  Notes         String?     @map("PENotes") @db.LongText
  ACCContract   ACCContract @relation(fields: [ACCContractId], references: [ContractId], onDelete: Cascade, map: "ACCContract_ACCPubEvent")

  @@index([ACCContractId], map: "ACCContract_ACCPubEvent")
}

model ACCStandardClause {
  Id             Int         @id @default(autoincrement()) @map("StdClauseId")
  StdClauseTitle String      @db.VarChar(100)
  Text           String?     @map("StdClauseText") @db.LongText
  ACCClause      ACCClause[]
}

model PersonPerson {
  PPId                                       Int    @id @default(autoincrement())
  PPPersonId                                 Int
  PPRoleType                                 String @db.VarChar(100)
  PPRolePersonId                             Int
  Person_PersonPerson_PPPersonIdToPerson     Person @relation("PersonPerson_PPPersonIdToPerson", fields: [PPPersonId], references: [PersonId], onDelete: Cascade, map: "Person_Person")
  Person_PersonPerson_PPRolePersonIdToPerson Person @relation("PersonPerson_PPRolePersonIdToPerson", fields: [PPRolePersonId], references: [PersonId], onDelete: Cascade, map: "Person_Person_InRole")

  @@index([PPPersonId], map: "Person_Person")
  @@index([PPRolePersonId], map: "Person_Person_InRole")
}

model ACCClause {
  Id                Int                @id @default(autoincrement()) @map("ClauseId")
  ACCContractId     Int                @map("ClauseACCContractId")
  StdClauseId       Int?               @map("ClauseStdClauseId")
  Text              String?            @map("ClauseText") @db.LongText
  ACCContract       ACCContract        @relation(fields: [ACCContractId], references: [ContractId], onDelete: Cascade, map: "ACCContract_ACCClause")
  ACCStandardClause ACCStandardClause? @relation(fields: [StdClauseId], references: [Id], onDelete: Cascade, map: "ACCStandardClause_ACCClause")

  @@index([ACCContractId], map: "ACCContract_ACCClause")
  @@index([StdClauseId], map: "ACCStandardClause_ACCClause")
}

model ContractFile {
  Id                Int      @id @default(autoincrement()) @map("ContractFileId")
  ContractBookingId Int      @map("ContractFileContractBookingId")
  FileId            Int      @map("ContractFileFileId")
  Type              String?  @map("ContractFileType") @db.VarChar(20)
  Description       String?  @map("ContractFileDescription") @db.VarChar(80)
  Contract          Contract @relation(fields: [ContractBookingId], references: [BookingId], onDelete: Cascade, map: "Contract_ContractFile")

  @@index([ContractBookingId], map: "Contract_ContractFile")
}

model ACCDepartment {
  ACCDeptId   Int           @id @default(autoincrement())
  ACCDeptName String        @db.VarChar(20)
  ACCContract ACCContract[]
}

model ProductionFile {
  ProFiId              Int        @id @default(autoincrement())
  ProFiProductionId    Int
  ProFiFileId          Int
  ProFiFileType        String     @db.VarChar(10)
  ProFiFileDescription String?    @db.VarChar(80)
  File                 File       @relation(fields: [ProFiFileId], references: [Id], onDelete: Cascade, map: "File_ProductionFile")
  Production           Production @relation(fields: [ProFiProductionId], references: [Id], onDelete: Cascade, map: "Production_ProductionFile")

  @@index([ProFiFileId], map: "File_ProductionFile")
  @@index([ProFiProductionId], map: "Production_ProductionFile")
}

model DealMemoSalesEmailRecipient {
  DMSRDeMoId    Int
  DMSRAccUserId Int
  DealMemo      DealMemo @relation(fields: [DMSRDeMoId], references: [Id], onDelete: Cascade, map: "DealMemo_DeMoSalesRecipient")

  @@id([DMSRDeMoId, DMSRAccUserId])
  @@index([DMSRAccUserId], map: "Master_AccountUser_DeMoSalesRecipient")
}

model ACCContractData {
  DataId            Int               @id @default(autoincrement())
  DataACCContractId Int
  DataComponentId   Int
  DataIndexNum      Int?              @db.UnsignedSmallInt
  DataValue         String?           @db.Text
  ACCContract       ACCContract       @relation(fields: [DataACCContractId], references: [ContractId], onDelete: Cascade, map: "ACCContract_ACCContractData")
  TemplateComponent TemplateComponent @relation(fields: [DataComponentId], references: [ComponentId], onDelete: Cascade, map: "TemplateComponent_ACCContractData")

  @@unique([DataACCContractId, DataComponentId, DataIndexNum], map: "ACCContractData_Unique")
  @@index([DataComponentId], map: "TemplateComponent_ACCContractData")
}

model Template {
  TemplateId     Int           @id @default(autoincrement())
  TemplateName   String        @db.VarChar(80)
  TemplateFileId Int
  ACCContract    ACCContract[]
  File           File          @relation(fields: [TemplateFileId], references: [Id], onDelete: Cascade, map: "File_Template")
  TemplateRow    TemplateRow[]

  @@index([TemplateFileId], map: "File_Template")
}

model TemplateComponent {
  ComponentId       Int               @id @default(autoincrement())
  ComponentRowId    Int
  ComponentTypeId   Int
  ComponentSeqNo    Int               @db.UnsignedSmallInt
  ComponentTag      String            @db.VarChar(30)
  ComponentLabel    String?           @db.VarChar(50)
  ACCContractData   ACCContractData[]
  TemplateEntryType TemplateEntryType @relation(fields: [ComponentTypeId], references: [TETypeId], onDelete: Cascade, map: "TemplateEntryType_TemplateComponent")
  TemplateRow       TemplateRow       @relation(fields: [ComponentRowId], references: [TemplateRowId], onDelete: Cascade, map: "TemplateRow_TemplateComponent")

  @@index([ComponentTypeId], map: "TemplateEntryType_TemplateComponent")
  @@index([ComponentRowId], map: "TemplateRow_TemplateComponent")
}

model TemplateEntryType {
  TETypeId          Int                 @id @default(autoincrement())
  TETypeName        String              @db.VarChar(50)
  TemplateComponent TemplateComponent[]
}

model TemplateRow {
  TemplateRowId         Int                 @id @default(autoincrement())
  TemplateRowTemplateId Int
  TemplateRowNum        Int                 @db.SmallInt
  TemplateRowLabel      String              @db.VarChar(50)
  TemplateRowIsAList    Boolean             @default(dbgenerated("(b'0')")) @db.Bit(1)
  TemplateRowListName   String?             @db.VarChar(30)
  TemplateComponent     TemplateComponent[]
  Template              Template            @relation(fields: [TemplateRowTemplateId], references: [TemplateId], onDelete: Cascade, map: "Template_TemplateRow")

  @@index([TemplateRowTemplateId], map: "Template_TemplateRow")
}

model BookingFile {
  BookingFileId          Int     @id @default(autoincrement())
  BookingFileBookingId   Int
  BookingFileFileId      Int
  BookingFileType        String? @db.VarChar(20)
  BookingFileDescription String? @db.VarChar(80)
  File                   File    @relation(fields: [BookingFileFileId], references: [Id], onDelete: Cascade, map: "BookingFile_ibfk_1")
  Booking                Booking @relation(fields: [BookingFileBookingId], references: [Id], onDelete: Cascade, map: "Booking_BookingFile")

  @@index([BookingFileBookingId], map: "Booking_BookingFile")
  @@index([BookingFileFileId], map: "BookingFileFileId")
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view SalesFiguresView {
  RowNumber           BigInt    @default(0)
  SetId               Int?      @default(0)
  BookingId           Int?
  PerformanceId       Int?
  SetSalesFiguresDate DateTime? @db.Date
  SaleTypeId          Int?      @default(0)
  SaleTypeName        String?   @db.VarChar(45)
  SaleId              Int?      @default(0)
  SaleSeats           Int?
  SaleValue           Decimal?  @db.Decimal(10, 2)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingTravelView {
  BookingDateBlockId Int
  FromBookingId      Int  @default(0)
  Mileage            Int? @db.UnsignedSmallInt
  TimeMins           Int? @db.UnsignedSmallInt

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingHoldCompUnionView {
  SetBookingId        Int      @default(0)
  SetSalesFiguresDate DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  HoldOrComp          String   @default("") @db.VarChar(4)
  Code                String   @default("") @db.VarChar(5)
  Name                String   @default("") @db.VarChar(30)
  Seats               Int?
  Value               Decimal? @db.Decimal(8, 2)

  @@ignore
}

view ScheduleView {
  RowNumber           BigInt    @default(0)
  ProductionId        Int       @default(0)
  FullProductionCode  String?   @db.VarChar(20)
  ShowName            String?   @db.VarChar(80)
  RehearsalStartDate  DateTime? @db.Date
  ProductionStartDate DateTime? @db.Date
  ProductionEndDate   DateTime? @db.Date
  EntryDate           DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  ProductionWeekNum   Int?      @db.SmallInt
  EntryType           String?   @db.VarChar(30)
  EntryId             Int       @default(0)
  EntryName           String?   @db.VarChar(255)
  EntryStatusCode     String?   @default("") @db.Char(1)
  Location            String?   @db.VarChar(50)
  PencilNum           Int?
  VenueId             Int?
  VenueSeats          Float?
  Mileage             Decimal?  @db.Decimal(5, 0)
  TimeMins            Decimal?  @db.Decimal(5, 0)
  DateTypeId          Int?
  DateTypeName        String?   @db.VarChar(30)
  AffectsAvailability Bytes?    @db.VarBinary(1)
  SeqNo               Decimal?  @db.Decimal(4, 0)

  @@id([EntryDate, ProductionId, EntryId])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view DateBlockDatesView {
  DateBlockId         Int      @default(0)
  EntryType           String?  @db.VarChar(30)
  EntryId             Int      @default(0)
  EntryDate           DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  EntryName           String?  @db.VarChar(255)
  TownName            String?  @db.VarChar(50)
  StatusCode          String   @default("") @db.Char(1)
  PencilNum           Int?
  VenueId             Int?
  VenueSeats          Float?
  Mileage             Decimal? @db.Decimal(5, 0)
  TimeMins            Decimal? @db.Decimal(5, 0)
  DateTypeId          Int?
  DateTypeName        String?  @db.VarChar(30)
  AffectsAvailability Bytes?   @db.VarBinary(1)
  SeqNo               Decimal? @db.Decimal(4, 0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BarringView {
  RowNumber     BigInt  @default(0)
  VenueId       Int?    @default(0)
  BarredVenueId Int?    @default(0)
  BarType       String? @default("") @db.VarChar(7)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingDateDiffView {
  BookingDateBlockId Int
  FromBookingId      Int  @default(0)
  ToBookingId        Int  @default(0)
  DaysDifference     Int?
  FromVenueId        Int
  ToVenueId          Int

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BookingHoldCompsView {
  RowNumber          BigInt   @default(0)
  FullProductionCode String   @db.VarChar(20)
  VenueCode          String   @db.VarChar(6)
  VenueName          String   @db.VarChar(255)
  VenueSeats         Float?
  BookingFirstDate   DateTime @db.Date
  BookingStatusCode  String   @default("U") @db.Char(1)
  HoldOrComp         String   @default("") @db.VarChar(4)
  Code               String   @default("") @db.VarChar(5)
  Name               String   @default("") @db.VarChar(30)
  Seats              Decimal? @db.Decimal(32, 0)
  SoldSeats          Decimal? @db.Decimal(32, 0)
  ReservedSeats      Decimal? @db.Decimal(32, 0)

  @@id([FullProductionCode, VenueCode, Code])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view PromoterHoldsView {
  RowNumber                            BigInt   @default(0)
  ProductionId                         Int      @default(0)
  FullProductionCode                   String?  @db.VarChar(20)
  ShowName                             String?  @db.VarChar(80)
  VenueCode                            String?  @db.VarChar(6)
  VenueName                            String?  @db.VarChar(255)
  BookingId                            Int      @default(0)
  PerformanceDate                      DateTime @db.Date
  PerformanceTime                      DateTime @db.Time(0)
  AvailableCompSeats                   Int?     @default(1) @db.TinyInt
  AvailableCompNotes                   String?  @db.LongText
  CompAllocationSeats                  Int?     @default(1) @db.UnsignedSmallInt
  CompAllocationTicketHolderName       String?  @db.VarChar(50)
  CompAllocationSeatsAllocated         String?  @db.VarChar(50)
  CompAllocationTicketHolderEmail      String?  @db.VarChar(80)
  CompAllocationComments               String?  @db.VarChar(100)
  CompAllocationRequestedBy            String?  @db.VarChar(50)
  CompAllocationArrangedBy             String?  @db.VarChar(101)
  CompAllocationVenueConfirmationNotes String?  @db.Text

  @@id([ProductionId, BookingId, PerformanceDate, PerformanceTime])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ScheduledDatesView {
  Name_exp_1  BigInt    @default(0)
  DateBlockId Int?      @default(0)
  EntryId     Int?      @default(0)
  EntryDate   DateTime? @default(dbgenerated("('0000-00-00')")) @db.Date
  EntrySource String?   @default("") @db.VarChar(13)
  EntryName   String?   @db.VarChar(255)
  TownName    String?   @db.VarChar(50)
  StatusCode  String?   @default("") @db.Char(1)
  PencilNum   Int?
  VenueSeats  Float?
  Mileage     Decimal?  @db.Decimal(5, 0)
  TimeMins    Decimal?  @db.Decimal(5, 0)

  @@ignore
}

view SalesSetTotalsView {
  SetBookingId        Int
  SetSalesFiguresDate DateTime @db.Date
  SetIsFinalFigures   Boolean  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SaleTypeName        String   @db.VarChar(45)
  Seats               Decimal? @db.Decimal(32, 0)
  Value               Decimal? @db.Decimal(32, 2)

  @@unique([SetBookingId, SetSalesFiguresDate])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ProductionSummaryView {
  RowNumber                   BigInt   @default(0)
  ProductionId                Int?     @default(0)
  DateTypeAffectsAvailability Boolean? @db.Bit(1)
  DateTypeId                  Int?
  DateTypeSeqNo               Decimal? @db.Decimal(3, 0)
  Item                        String?  @default("") @db.VarChar(30)
  StatusCode                  String?  @default("") @db.Char(1)
  Count                       BigInt?  @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ProductionPerformanceSummaryView {
  RowNumber    BigInt @default(0)
  ProductionId Int
  StatusCode   String @default("U") @db.Char(1)
  Count        BigInt @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ProductionView {
  RowNumber            BigInt    @default(0)
  ProductionId         Int?      @default(0)
  ProductionCode       String?   @db.VarChar(10)
  FullProductionCode   String?   @db.VarChar(20)
  ProductionSalesEmail String?   @db.VarChar(80)
  ProductionIsArchived Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  ProductionIsDeleted  Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  ShowId               Int?      @default(0)
  ShowCode             String?   @db.VarChar(10)
  ShowName             String?   @db.VarChar(80)
  ShowType             String?   @db.VarChar(1)
  ProductionLogoFileId Int?
  RehearsalStartDate   DateTime? @db.Date
  RehearsalEndDate     DateTime? @db.Date
  ProductionStartDate  DateTime? @db.Date
  ProductionEndDate    DateTime? @db.Date

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ShowView {
  RowNumber      BigInt   @default(0)
  ShowId         Int?     @default(0)
  ShowCode       String?  @db.VarChar(10)
  ShowName       String?  @db.VarChar(80)
  ShowType       String?  @db.VarChar(1)
  ShowIsArchived Boolean? @default(dbgenerated("(b'0')")) @db.Bit(1)

  @@ignore
}

view VenueView {
  RowNumber                    BigInt   @default(0)
  VenueId                      Int      @default(0)
  VenueCode                    String   @db.VarChar(6)
  VenueName                    String?  @db.VarChar(255)
  VenueStatusCode              String?  @default("O") @db.VarChar(1)
  VenueWebsite                 String?  @db.VarChar(255)
  VenueFamily                  String?  @db.VarChar(50)
  VenueCurrencyCode            String?  @db.VarChar(3)
  VenueVATIndicator            Boolean? @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueTechSpecsURL            String?  @db.VarChar(255)
  VenueSeats                   Float?
  VenueBarringClause           String?  @db.VarChar(255)
  VenueTownPopulation          Float?
  VenueLXDesk                  String?  @db.VarChar(50)
  VenueLXNotes                 String?  @db.VarChar(2000)
  VenueSoundDesk               String?  @db.VarChar(50)
  VenueSoundNotes              String?  @db.VarChar(2000)
  VenueStageSize               String?  @db.VarChar(50)
  VenueGridHeight              String?  @db.VarChar(50)
  VenueVenueFlags              String?  @db.VarChar(2000)
  VenueBarringWeeksPre         Int?     @db.TinyInt
  VenueBarringWeeksPost        Int?     @db.TinyInt
  VenueBarringMiles            Int?
  VenueCulturallyExempt        Boolean? @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueAccountId               Int?
  VenueIsDeleted               Boolean? @default(dbgenerated("(b'0')")) @db.Bit(1)
  VenueMainAddress1            String?  @db.VarChar(50)
  VenueMainAddress2            String?  @db.VarChar(50)
  VenueMainAddress3            String?  @db.VarChar(50)
  VenueMainAddressTown         String?  @db.VarChar(50)
  VenueMainAddressCounty       String?  @db.VarChar(50)
  VenueMainAddressPostcode     String?  @db.VarChar(12)
  VenueMainAddressCountry      String?  @db.VarChar(40)
  VenueDeliveryAddress1        String?  @db.VarChar(50)
  VenueDeliveryAddress2        String?  @db.VarChar(50)
  VenueDeliveryAddress3        String?  @db.VarChar(50)
  VenueDeliveryAddressTown     String?  @db.VarChar(50)
  VenueDeliveryAddressCounty   String?  @db.VarChar(50)
  VenueDeliveryAddressPostcode String?  @db.VarChar(12)
  VenueDeliveryAddressCountry  String?  @db.VarChar(40)
  VenueMainNoteText            String?  @db.LongText
  VenueWarningNoteText         String?  @db.LongText

  @@id([VenueId, VenueCode])
}

view SalesView {
  ShowName                    String?   @db.VarChar(80)
  ProductionId                Int?      @default(0)
  FullProductionCode          String?   @db.VarChar(20)
  ProductionStartDate         DateTime? @db.Date
  ProductionEndDate           DateTime? @db.Date
  BookingId                   Int       @default(0)
  BookingFirstDate            DateTime  @db.Date
  BookingStatusCode           String    @default("U") @db.Char(1)
  BookingProductionWeekNum    Int?      @db.SmallInt
  VenueTown                   String?   @db.VarChar(50)
  VenueCode                   String?   @db.VarChar(6)
  VenueName                   String?   @db.VarChar(255)
  VenueCurrencyCode           String?   @db.VarChar(3)
  VenueCurrencySymbolUnicode  String?   @db.VarChar(30)
  ConversionToCurrencyCode    String?   @db.VarChar(3)
  ConversionRate              Decimal?  @db.Decimal(8, 4)
  SetId                       Int       @default(0)
  SetSalesFiguresDate         DateTime? @db.Date
  SetBookingWeekNum           Int?      @db.SmallInt
  SetProductionWeekDate       DateTime? @db.Date
  SetProductionWeekNum        Int?      @db.SmallInt
  SetShowDayNum               Int?      @db.SmallInt
  SetNotOnSale                Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsFinalFigures           Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetFinalSalesApprovedByUser String?   @db.VarChar(100)
  SetSingleSeats              Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetBrochureReleased         Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SetIsCopy                   Boolean?  @default(dbgenerated("(b'0')")) @db.Bit(1)
  SaleTypeName                String    @db.VarChar(45)
  Seats                       Decimal?  @db.Decimal(32, 0)
  Value                       Decimal?  @db.Decimal(32, 2)
  TotalCapacity               Float?
  FinalFiguresDate            DateTime? @db.Date
  FinalFiguresSeats           Decimal?  @db.Decimal(32, 0)
  FinalFiguresValue           Decimal?  @db.Decimal(32, 2)
  NotOnSaleDate               DateTime? @db.Date
  TotalHoldSeats              Decimal?  @db.Decimal(32, 0)
  LastFiguresDate             DateTime? @db.Date
  LastFiguresSeats            Decimal?  @db.Decimal(32, 0)
  LastFiguresValue            Decimal?  @db.Decimal(32, 2)

  @@id([BookingId, SetId, SaleTypeName])
}

view BookingSelectionView {
  RowNumber             BigInt    @default(0)
  BookingId             Int       @default(0)
  BookingStatusCode     String?   @default("U") @db.Char(1)
  BookingFirstDate      DateTime? @db.Date
  VenueId               Int       @default(0)
  VenueCode             String?   @db.VarChar(6)
  VenueMainAddressTown  String?   @db.VarChar(50)
  ProductionId          Int       @default(0)
  FullProductionCode    String?   @db.VarChar(20)
  ProductionLengthWeeks Int?      @db.SmallInt

  @@id([BookingId, VenueId, ProductionId])
}

view SalesSummaryView {
  RowNumber                  BigInt    @default(0)
  ProductionId               Int       @default(0)
  FullProductionCode         String?   @db.VarChar(20)
  ShowName                   String?   @db.VarChar(80)
  ProductionStartDate        DateTime? @db.Date
  ProductionEndDate          DateTime? @db.Date
  ProductionWeekNum          Int?      @db.SmallInt
  EntryDate                  DateTime  @default(dbgenerated("('0000-00-00')")) @db.Date
  Location                   String?   @db.VarChar(50)
  EntryId                    Int?      @default(0)
  EntryName                  String?   @db.VarChar(255)
  EntryType                  String?   @db.VarChar(30)
  EntryStatusCode            String?   @default("") @db.Char(1)
  Value                      Decimal?  @db.Decimal(32, 2)
  VenueCurrencyCode          String?   @db.VarChar(3)
  VenueCurrencySymbolUnicode String?   @db.VarChar(30)
  ConversionRate             Decimal?  @db.Decimal(8, 4)
  ConversionToCurrencyCode   String?   @db.VarChar(3)
  SaleTypeName               String    @db.VarChar(45)
  SetSalesFiguresDate        DateTime? @db.Date
  FinalSetSalesFiguresDate   DateTime? @db.Date
  NotOnSaleDate              DateTime? @db.Date

  @@id([ProductionId, EntryDate, SaleTypeName])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ACCContractListView {
  RowNumber                BigInt    @default(0)
  PersonFirstName          String?   @db.VarChar(50)
  PersonLastName           String?   @db.VarChar(50)
  RoleName                 String?   @db.VarChar(50)
  StatusCode               String?   @db.VarChar(4)
  CompletedByUserFirstName String?   @db.VarChar(50)
  CompletedByUserLastName  String?   @db.VarChar(50)
  CheckedByUserFirstName   String?   @db.VarChar(50)
  CheckedByUserLastName    String?   @db.VarChar(50)
  DateIssued               DateTime? @db.Date
  DateReturned             DateTime? @db.Date
  ACCCNotes                String?   @db.LongText

  @@ignore
}

view VenueVenueTravelView {
  Venue1Id Int  @map("VVVenue1Id")
  Venue2Id Int  @map("VVVenue2Id")
  Mileage  Int? @map("VVMileage") @db.UnsignedSmallInt
  TimeMins Int? @map("VVTimeMins") @db.UnsignedSmallInt

  @@id([Venue1Id, Venue2Id])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ProductionSummarySubView {
  ProductionId                Int      @default(0)
  DateTypeAffectsAvailability Boolean? @db.Bit(1)
  DateTypeId                  Int?
  DateTypeSeqNo               Decimal? @db.Decimal(3, 0)
  Item                        String   @default("") @db.VarChar(30)
  StatusCode                  String   @default("") @db.Char(1)
  Count                       BigInt   @default(0)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view BarringSubView {
  VenueId       Int    @default(0)
  BarredVenueId Int    @default(0)
  BarType       String @default("") @db.VarChar(7)

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view ScheduledDatesSubView {
  DateBlockId Int      @default(0)
  EntryId     Int      @default(0)
  EntryDate   DateTime @default(dbgenerated("('0000-00-00')")) @db.Date
  EntrySource String   @default("") @db.VarChar(13)
  EntryName   String?  @db.VarChar(255)
  TownName    String?  @db.VarChar(50)
  StatusCode  String   @default("") @db.Char(1)
  PencilNum   Int?
  VenueSeats  Float?
  Mileage     Decimal? @db.Decimal(5, 0)
  TimeMins    Decimal? @db.Decimal(5, 0)

  @@ignore
}
